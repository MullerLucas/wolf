<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="662" onload="init(evt)" viewBox="0 0 1200 662" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="662" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="645.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="645.00"> </text><svg id="frames" x="10" width="1180" total_samples="93904"><g><title>[[heap]] (368 samples, 0.39%)</title><rect x="0.0000%" y="581" width="0.3919%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="368"/><text x="0.2500%" y="591.50"></text></g><g><title>[libc.so.6] (368 samples, 0.39%)</title><rect x="0.0000%" y="565" width="0.3919%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="368"/><text x="0.2500%" y="575.50"></text></g><g><title>[unknown] (27 samples, 0.03%)</title><rect x="0.3631%" y="549" width="0.0288%" height="15" fill="rgb(221,193,54)" fg:x="341" fg:w="27"/><text x="0.6131%" y="559.50"></text></g><g><title>[libc.so.6] (59 samples, 0.06%)</title><rect x="0.3993%" y="533" width="0.0628%" height="15" fill="rgb(248,212,6)" fg:x="375" fg:w="59"/><text x="0.6493%" y="543.50"></text></g><g><title>[unknown] (59 samples, 0.06%)</title><rect x="0.3993%" y="517" width="0.0628%" height="15" fill="rgb(208,68,35)" fg:x="375" fg:w="59"/><text x="0.6493%" y="527.50"></text></g><g><title>[libc.so.6] (153 samples, 0.16%)</title><rect x="0.3993%" y="549" width="0.1629%" height="15" fill="rgb(232,128,0)" fg:x="375" fg:w="153"/><text x="0.6493%" y="559.50"></text></g><g><title>[unknown] (94 samples, 0.10%)</title><rect x="0.4622%" y="533" width="0.1001%" height="15" fill="rgb(207,160,47)" fg:x="434" fg:w="94"/><text x="0.7122%" y="543.50"></text></g><g><title>[[stack]] (213 samples, 0.23%)</title><rect x="0.3919%" y="581" width="0.2268%" height="15" fill="rgb(228,23,34)" fg:x="368" fg:w="213"/><text x="0.6419%" y="591.50"></text></g><g><title>pthread_cond_wait (206 samples, 0.22%)</title><rect x="0.3993%" y="565" width="0.2194%" height="15" fill="rgb(218,30,26)" fg:x="375" fg:w="206"/><text x="0.6493%" y="575.50"></text></g><g><title>[unknown] (53 samples, 0.06%)</title><rect x="0.5623%" y="549" width="0.0564%" height="15" fill="rgb(220,122,19)" fg:x="528" fg:w="53"/><text x="0.8123%" y="559.50"></text></g><g><title>[libc.so.6] (16 samples, 0.02%)</title><rect x="3.1649%" y="533" width="0.0170%" height="15" fill="rgb(250,228,42)" fg:x="2972" fg:w="16"/><text x="3.4149%" y="543.50"></text></g><g><title>[libc.so.6] (912 samples, 0.97%)</title><rect x="5.3736%" y="469" width="0.9712%" height="15" fill="rgb(240,193,28)" fg:x="5046" fg:w="912"/><text x="5.6236%" y="479.50"></text></g><g><title>[libc.so.6] (2,875 samples, 3.06%)</title><rect x="3.2874%" y="501" width="3.0616%" height="15" fill="rgb(216,20,37)" fg:x="3087" fg:w="2875"/><text x="3.5374%" y="511.50">[li..</text></g><g><title>[libc.so.6] (2,868 samples, 3.05%)</title><rect x="3.2949%" y="485" width="3.0542%" height="15" fill="rgb(206,188,39)" fg:x="3094" fg:w="2868"/><text x="3.5449%" y="495.50">[li..</text></g><g><title>cfree (2,976 samples, 3.17%)</title><rect x="3.1830%" y="533" width="3.1692%" height="15" fill="rgb(217,207,13)" fg:x="2989" fg:w="2976"/><text x="3.4330%" y="543.50">cfr..</text></g><g><title>[libc.so.6] (2,945 samples, 3.14%)</title><rect x="3.2161%" y="517" width="3.1362%" height="15" fill="rgb(231,73,38)" fg:x="3020" fg:w="2945"/><text x="3.4661%" y="527.50">[li..</text></g><g><title>[libc.so.6] (3,182 samples, 3.39%)</title><rect x="2.9690%" y="549" width="3.3886%" height="15" fill="rgb(225,20,46)" fg:x="2788" fg:w="3182"/><text x="3.2190%" y="559.50">[li..</text></g><g><title>[unknown] (4,786 samples, 5.10%)</title><rect x="6.3576%" y="549" width="5.0967%" height="15" fill="rgb(210,31,41)" fg:x="5970" fg:w="4786"/><text x="6.6076%" y="559.50">[unkno..</text></g><g><title>[unknown] (2,896 samples, 3.08%)</title><rect x="8.3703%" y="533" width="3.0840%" height="15" fill="rgb(221,200,47)" fg:x="7860" fg:w="2896"/><text x="8.6203%" y="543.50">[un..</text></g><g><title>[unknown] (1,239 samples, 1.32%)</title><rect x="10.1348%" y="517" width="1.3194%" height="15" fill="rgb(226,26,5)" fg:x="9517" fg:w="1239"/><text x="10.3848%" y="527.50"></text></g><g><title>[unknown] (201 samples, 0.21%)</title><rect x="11.2402%" y="501" width="0.2140%" height="15" fill="rgb(249,33,26)" fg:x="10555" fg:w="201"/><text x="11.4902%" y="511.50"></text></g><g><title>[unknown] (16 samples, 0.02%)</title><rect x="11.4372%" y="485" width="0.0170%" height="15" fill="rgb(235,183,28)" fg:x="10740" fg:w="16"/><text x="11.6872%" y="495.50"></text></g><g><title>__ctype_init (1,785 samples, 1.90%)</title><rect x="11.4564%" y="549" width="1.9009%" height="15" fill="rgb(221,5,38)" fg:x="10758" fg:w="1785"/><text x="11.7064%" y="559.50">_..</text></g><g><title>[unknown] (373 samples, 0.40%)</title><rect x="12.9600%" y="533" width="0.3972%" height="15" fill="rgb(247,18,42)" fg:x="12170" fg:w="373"/><text x="13.2100%" y="543.50"></text></g><g><title>__sigsetjmp (73 samples, 0.08%)</title><rect x="13.3626%" y="549" width="0.0777%" height="15" fill="rgb(241,131,45)" fg:x="12548" fg:w="73"/><text x="13.6126%" y="559.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;wolf::ThreadPool::ThreadPool(unsigned long)::{lambda()#1}&gt; &gt; &gt;::_M_run (94 samples, 0.10%)</title><rect x="13.5053%" y="533" width="0.1001%" height="15" fill="rgb(249,31,29)" fg:x="12682" fg:w="94"/><text x="13.7553%" y="543.50"></text></g><g><title>std::thread::_Invoker&lt;std::tuple&lt;wolf::ThreadPool::ThreadPool(unsigned long)::{lambda()#1}&gt; &gt;::operator (32 samples, 0.03%)</title><rect x="13.5713%" y="517" width="0.0341%" height="15" fill="rgb(225,111,53)" fg:x="12744" fg:w="32"/><text x="13.8213%" y="527.50"></text></g><g><title>void std::thread::_Invoker&lt;std::tuple&lt;wolf::ThreadPool::ThreadPool(unsigned long)::{lambda()#1}&gt; &gt;::_M_invoke&lt;0ul&gt; (32 samples, 0.03%)</title><rect x="13.5713%" y="501" width="0.0341%" height="15" fill="rgb(238,160,17)" fg:x="12744" fg:w="32"/><text x="13.8213%" y="511.50"></text></g><g><title>std::__invoke_result&lt;wolf::ThreadPool::ThreadPool(unsigned long)::{lambda()#1}&gt;::type std::__invoke&lt;wolf::ThreadPool::ThreadPool(unsigned long)::{lambda()#1}&gt; (32 samples, 0.03%)</title><rect x="13.5713%" y="485" width="0.0341%" height="15" fill="rgb(214,148,48)" fg:x="12744" fg:w="32"/><text x="13.8213%" y="495.50"></text></g><g><title>void std::__invoke_impl&lt;void, wolf::ThreadPool::ThreadPool(unsigned long)::{lambda()#1}&gt; (32 samples, 0.03%)</title><rect x="13.5713%" y="469" width="0.0341%" height="15" fill="rgb(232,36,49)" fg:x="12744" fg:w="32"/><text x="13.8213%" y="479.50"></text></g><g><title>cfree (56 samples, 0.06%)</title><rect x="13.6150%" y="501" width="0.0596%" height="15" fill="rgb(209,103,24)" fg:x="12785" fg:w="56"/><text x="13.8650%" y="511.50"></text></g><g><title>[libc.so.6] (45 samples, 0.05%)</title><rect x="13.6267%" y="485" width="0.0479%" height="15" fill="rgb(229,88,8)" fg:x="12796" fg:w="45"/><text x="13.8767%" y="495.50"></text></g><g><title>[libc.so.6] (16 samples, 0.02%)</title><rect x="13.6576%" y="469" width="0.0170%" height="15" fill="rgb(213,181,19)" fg:x="12825" fg:w="16"/><text x="13.9076%" y="479.50"></text></g><g><title>std::unique_ptr&lt;std::thread::_State, std::default_delete&lt;std::thread::_State&gt; &gt;::~unique_ptr (76 samples, 0.08%)</title><rect x="13.6054%" y="533" width="0.0809%" height="15" fill="rgb(254,191,54)" fg:x="12776" fg:w="76"/><text x="13.8554%" y="543.50"></text></g><g><title>std::default_delete&lt;std::thread::_State&gt;::operator (76 samples, 0.08%)</title><rect x="13.6054%" y="517" width="0.0809%" height="15" fill="rgb(241,83,37)" fg:x="12776" fg:w="76"/><text x="13.8554%" y="527.50"></text></g><g><title>std::_Function_base::_Base_manager&lt;wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt;::_M_get_pointer (19 samples, 0.02%)</title><rect x="13.8035%" y="501" width="0.0202%" height="15" fill="rgb(233,36,39)" fg:x="12962" fg:w="19"/><text x="14.0535%" y="511.50"></text></g><g><title>std::_Function_handler&lt;void (), wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt;::_M_invoke (230 samples, 0.24%)</title><rect x="13.8024%" y="517" width="0.2449%" height="15" fill="rgb(226,3,54)" fg:x="12961" fg:w="230"/><text x="14.0524%" y="527.50"></text></g><g><title>std::enable_if&lt;is_invocable_r_v&lt;void, wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&amp;&gt;, void&gt;::type std::__invoke_r&lt;void, wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&amp;&gt; (210 samples, 0.22%)</title><rect x="13.8237%" y="501" width="0.2236%" height="15" fill="rgb(245,192,40)" fg:x="12981" fg:w="210"/><text x="14.0737%" y="511.50"></text></g><g><title>void std::__invoke_impl&lt;void, wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&amp;&gt; (210 samples, 0.22%)</title><rect x="13.8237%" y="485" width="0.2236%" height="15" fill="rgb(238,167,29)" fg:x="12981" fg:w="210"/><text x="14.0737%" y="495.50"></text></g><g><title>wolf::ThreadPool::enqueue (210 samples, 0.22%)</title><rect x="13.8237%" y="469" width="0.2236%" height="15" fill="rgb(232,182,51)" fg:x="12981" fg:w="210"/><text x="14.0737%" y="479.50"></text></g><g><title>std::packaged_task&lt;void ()&gt;::operator (210 samples, 0.22%)</title><rect x="13.8237%" y="453" width="0.2236%" height="15" fill="rgb(231,60,39)" fg:x="12981" fg:w="210"/><text x="14.0737%" y="463.50"></text></g><g><title>void std::__future_base::_State_baseV2::_S_check&lt;std::__future_base::_Task_state_base&lt;void ()&gt; &gt; (140 samples, 0.15%)</title><rect x="13.8982%" y="437" width="0.1491%" height="15" fill="rgb(208,69,12)" fg:x="13051" fg:w="140"/><text x="14.1482%" y="447.50"></text></g><g><title>std::__shared_ptr&lt;std::__future_base::_Task_state_base&lt;void ()&gt;, (__gnu_cxx::_Lock_policy)2&gt;::operator bool (140 samples, 0.15%)</title><rect x="13.8982%" y="421" width="0.1491%" height="15" fill="rgb(235,93,37)" fg:x="13051" fg:w="140"/><text x="14.1482%" y="431.50"></text></g><g><title>__once_proxy (41 samples, 0.04%)</title><rect x="14.3125%" y="437" width="0.0437%" height="15" fill="rgb(213,116,39)" fg:x="13440" fg:w="41"/><text x="14.5625%" y="447.50"></text></g><g><title>__tls_get_addr (35 samples, 0.04%)</title><rect x="14.3189%" y="421" width="0.0373%" height="15" fill="rgb(222,207,29)" fg:x="13446" fg:w="35"/><text x="14.5689%" y="431.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator++ (26 samples, 0.03%)</title><rect x="15.8726%" y="277" width="0.0277%" height="15" fill="rgb(206,96,30)" fg:x="14905" fg:w="26"/><text x="16.1226%" y="287.50"></text></g><g><title>[unknown] (18 samples, 0.02%)</title><rect x="31.6036%" y="213" width="0.0192%" height="15" fill="rgb(218,138,4)" fg:x="29677" fg:w="18"/><text x="31.8536%" y="223.50"></text></g><g><title>__lll_lock_wait_private (13 samples, 0.01%)</title><rect x="31.6227%" y="213" width="0.0138%" height="15" fill="rgb(250,191,14)" fg:x="29695" fg:w="13"/><text x="31.8727%" y="223.50"></text></g><g><title>[libc.so.6] (2,436 samples, 2.59%)</title><rect x="29.0499%" y="229" width="2.5941%" height="15" fill="rgb(239,60,40)" fg:x="27279" fg:w="2436"/><text x="29.2999%" y="239.50">[l..</text></g><g><title>[libc.so.6] (12,472 samples, 13.28%)</title><rect x="18.3741%" y="245" width="13.2816%" height="15" fill="rgb(206,27,48)" fg:x="17254" fg:w="12472"/><text x="18.6241%" y="255.50">[libc.so.6]</text></g><g><title>[unknown] (11 samples, 0.01%)</title><rect x="31.6440%" y="229" width="0.0117%" height="15" fill="rgb(225,35,8)" fg:x="29715" fg:w="11"/><text x="31.8940%" y="239.50"></text></g><g><title>operator new (14,796 samples, 15.76%)</title><rect x="15.9003%" y="277" width="15.7565%" height="15" fill="rgb(250,213,24)" fg:x="14931" fg:w="14796"/><text x="16.1503%" y="287.50">operator new</text></g><g><title>malloc (14,731 samples, 15.69%)</title><rect x="15.9695%" y="261" width="15.6873%" height="15" fill="rgb(247,123,22)" fg:x="14996" fg:w="14731"/><text x="16.2195%" y="271.50">malloc</text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::end (44 samples, 0.05%)</title><rect x="31.6568%" y="277" width="0.0469%" height="15" fill="rgb(231,138,38)" fg:x="29727" fg:w="44"/><text x="31.9068%" y="287.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (44 samples, 0.05%)</title><rect x="31.6568%" y="261" width="0.0469%" height="15" fill="rgb(231,145,46)" fg:x="29727" fg:w="44"/><text x="31.9068%" y="271.50"></text></g><g><title>std::unordered_map&lt;char, wolf::WordTrieNode*, std::hash&lt;char&gt;, std::equal_to&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt; &gt;::find (8,857 samples, 9.43%)</title><rect x="31.7037%" y="277" width="9.4320%" height="15" fill="rgb(251,118,11)" fg:x="29771" fg:w="8857"/><text x="31.9537%" y="287.50">std::unordere..</text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (8,857 samples, 9.43%)</title><rect x="31.7037%" y="261" width="9.4320%" height="15" fill="rgb(217,147,25)" fg:x="29771" fg:w="8857"/><text x="31.9537%" y="271.50">std::_Hashtab..</text></g><g><title>std::__detail::operator== (11 samples, 0.01%)</title><rect x="41.1239%" y="245" width="0.0117%" height="15" fill="rgb(247,81,37)" fg:x="38617" fg:w="11"/><text x="41.3739%" y="255.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (194 samples, 0.21%)</title><rect x="41.2368%" y="245" width="0.2066%" height="15" fill="rgb(209,12,38)" fg:x="38723" fg:w="194"/><text x="41.4868%" y="255.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (173 samples, 0.18%)</title><rect x="41.2592%" y="229" width="0.1842%" height="15" fill="rgb(227,1,9)" fg:x="38744" fg:w="173"/><text x="41.5092%" y="239.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (173 samples, 0.18%)</title><rect x="41.2592%" y="213" width="0.1842%" height="15" fill="rgb(248,47,43)" fg:x="38744" fg:w="173"/><text x="41.5092%" y="223.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (92 samples, 0.10%)</title><rect x="41.4434%" y="245" width="0.0980%" height="15" fill="rgb(221,10,30)" fg:x="38917" fg:w="92"/><text x="41.6934%" y="255.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (92 samples, 0.10%)</title><rect x="41.4434%" y="229" width="0.0980%" height="15" fill="rgb(210,229,1)" fg:x="38917" fg:w="92"/><text x="41.6934%" y="239.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (10 samples, 0.01%)</title><rect x="42.4338%" y="181" width="0.0106%" height="15" fill="rgb(222,148,37)" fg:x="39847" fg:w="10"/><text x="42.6838%" y="191.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (1,031 samples, 1.10%)</title><rect x="42.4338%" y="229" width="1.0979%" height="15" fill="rgb(234,67,33)" fg:x="39847" fg:w="1031"/><text x="42.6838%" y="239.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (1,031 samples, 1.10%)</title><rect x="42.4338%" y="213" width="1.0979%" height="15" fill="rgb(247,98,35)" fg:x="39847" fg:w="1031"/><text x="42.6838%" y="223.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (1,031 samples, 1.10%)</title><rect x="42.4338%" y="197" width="1.0979%" height="15" fill="rgb(247,138,52)" fg:x="39847" fg:w="1031"/><text x="42.6838%" y="207.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (1,021 samples, 1.09%)</title><rect x="42.4444%" y="181" width="1.0873%" height="15" fill="rgb(213,79,30)" fg:x="39857" fg:w="1021"/><text x="42.6944%" y="191.50"></text></g><g><title>[libc.so.6] (134 samples, 0.14%)</title><rect x="43.7756%" y="213" width="0.1427%" height="15" fill="rgb(246,177,23)" fg:x="41107" fg:w="134"/><text x="44.0256%" y="223.50"></text></g><g><title>[libc.so.6] (248 samples, 0.26%)</title><rect x="48.9724%" y="149" width="0.2641%" height="15" fill="rgb(230,62,27)" fg:x="45987" fg:w="248"/><text x="49.2224%" y="159.50"></text></g><g><title>[libc.so.6] (921 samples, 0.98%)</title><rect x="48.2610%" y="165" width="0.9808%" height="15" fill="rgb(216,154,8)" fg:x="45319" fg:w="921"/><text x="48.5110%" y="175.50"></text></g><g><title>[libc.so.6] (4,263 samples, 4.54%)</title><rect x="44.7052%" y="181" width="4.5397%" height="15" fill="rgb(244,35,45)" fg:x="41980" fg:w="4263"/><text x="44.9552%" y="191.50">[libc..</text></g><g><title>operator new (5,001 samples, 5.33%)</title><rect x="43.9204%" y="213" width="5.3257%" height="15" fill="rgb(251,115,12)" fg:x="41243" fg:w="5001"/><text x="44.1704%" y="223.50">operato..</text></g><g><title>malloc (4,974 samples, 5.30%)</title><rect x="43.9491%" y="197" width="5.2969%" height="15" fill="rgb(240,54,50)" fg:x="41270" fg:w="4974"/><text x="44.1991%" y="207.50">malloc</text></g><g><title>cfree (38 samples, 0.04%)</title><rect x="49.2514%" y="117" width="0.0405%" height="15" fill="rgb(233,84,52)" fg:x="46249" fg:w="38"/><text x="49.5014%" y="127.50"></text></g><g><title>[libc.so.6] (22 samples, 0.02%)</title><rect x="49.2684%" y="101" width="0.0234%" height="15" fill="rgb(207,117,47)" fg:x="46265" fg:w="22"/><text x="49.5184%" y="111.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (44 samples, 0.05%)</title><rect x="49.2460%" y="213" width="0.0469%" height="15" fill="rgb(249,43,39)" fg:x="46244" fg:w="44"/><text x="49.4960%" y="223.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (44 samples, 0.05%)</title><rect x="49.2460%" y="197" width="0.0469%" height="15" fill="rgb(209,38,44)" fg:x="46244" fg:w="44"/><text x="49.4960%" y="207.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (39 samples, 0.04%)</title><rect x="49.2514%" y="181" width="0.0415%" height="15" fill="rgb(236,212,23)" fg:x="46249" fg:w="39"/><text x="49.5014%" y="191.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (39 samples, 0.04%)</title><rect x="49.2514%" y="165" width="0.0415%" height="15" fill="rgb(242,79,21)" fg:x="46249" fg:w="39"/><text x="49.5014%" y="175.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (39 samples, 0.04%)</title><rect x="49.2514%" y="149" width="0.0415%" height="15" fill="rgb(211,96,35)" fg:x="46249" fg:w="39"/><text x="49.5014%" y="159.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (39 samples, 0.04%)</title><rect x="49.2514%" y="133" width="0.0415%" height="15" fill="rgb(253,215,40)" fg:x="46249" fg:w="39"/><text x="49.5014%" y="143.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (5,979 samples, 6.37%)</title><rect x="43.5317%" y="229" width="6.3671%" height="15" fill="rgb(211,81,21)" fg:x="40878" fg:w="5979"/><text x="43.7817%" y="239.50">std::_Ha..</text></g><g><title>std::__detail::_Hash_code_base&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (569 samples, 0.61%)</title><rect x="49.2929%" y="213" width="0.6059%" height="15" fill="rgb(208,190,38)" fg:x="46288" fg:w="569"/><text x="49.5429%" y="223.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (569 samples, 0.61%)</title><rect x="49.2929%" y="197" width="0.6059%" height="15" fill="rgb(235,213,38)" fg:x="46288" fg:w="569"/><text x="49.5429%" y="207.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_M_next_bkt (241 samples, 0.26%)</title><rect x="50.2077%" y="213" width="0.2566%" height="15" fill="rgb(237,122,38)" fg:x="47147" fg:w="241"/><text x="50.4577%" y="223.50"></text></g><g><title>unsigned long const* std::lower_bound&lt;unsigned long const*, unsigned long&gt; (12 samples, 0.01%)</title><rect x="50.4515%" y="197" width="0.0128%" height="15" fill="rgb(244,218,35)" fg:x="47376" fg:w="12"/><text x="50.7015%" y="207.50"></text></g><g><title>unsigned long const* std::__lower_bound&lt;unsigned long const*, unsigned long, __gnu_cxx::__ops::_Iter_less_val&gt; (12 samples, 0.01%)</title><rect x="50.4515%" y="181" width="0.0128%" height="15" fill="rgb(240,68,47)" fg:x="47376" fg:w="12"/><text x="50.7015%" y="191.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_M_need_rehash (572 samples, 0.61%)</title><rect x="49.8988%" y="229" width="0.6091%" height="15" fill="rgb(210,16,53)" fg:x="46857" fg:w="572"/><text x="50.1488%" y="239.50"></text></g><g><title>unsigned long const&amp; std::max&lt;unsigned long&gt; (41 samples, 0.04%)</title><rect x="50.4643%" y="213" width="0.0437%" height="15" fill="rgb(235,124,12)" fg:x="47388" fg:w="41"/><text x="50.7143%" y="223.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (8,422 samples, 8.97%)</title><rect x="41.5414%" y="245" width="8.9687%" height="15" fill="rgb(224,169,11)" fg:x="39009" fg:w="8422"/><text x="41.7914%" y="255.50">std::_Hashtab..</text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt;::_Hash_node (15 samples, 0.02%)</title><rect x="50.5101%" y="213" width="0.0160%" height="15" fill="rgb(250,166,2)" fg:x="47431" fg:w="15"/><text x="50.7601%" y="223.50"></text></g><g><title>std::__detail::_Hash_node_base::_Hash_node_base (15 samples, 0.02%)</title><rect x="50.5101%" y="197" width="0.0160%" height="15" fill="rgb(242,216,29)" fg:x="47431" fg:w="15"/><text x="50.7601%" y="207.50"></text></g><g><title>[libc.so.6] (7,131 samples, 7.59%)</title><rect x="52.7038%" y="133" width="7.5939%" height="15" fill="rgb(230,116,27)" fg:x="49491" fg:w="7131"/><text x="52.9538%" y="143.50">[libc.so.6]</text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::allocate (9,177 samples, 9.77%)</title><rect x="50.5261%" y="213" width="9.7727%" height="15" fill="rgb(228,99,48)" fg:x="47446" fg:w="9177"/><text x="50.7761%" y="223.50">std::allocator..</text></g><g><title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt;::allocate (9,177 samples, 9.77%)</title><rect x="50.5261%" y="197" width="9.7727%" height="15" fill="rgb(253,11,6)" fg:x="47446" fg:w="9177"/><text x="50.7761%" y="207.50">std::allocator..</text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt;::allocate (9,177 samples, 9.77%)</title><rect x="50.5261%" y="181" width="9.7727%" height="15" fill="rgb(247,143,39)" fg:x="47446" fg:w="9177"/><text x="50.7761%" y="191.50">std::__new_all..</text></g><g><title>operator new (9,141 samples, 9.73%)</title><rect x="50.5644%" y="165" width="9.7344%" height="15" fill="rgb(236,97,10)" fg:x="47482" fg:w="9141"/><text x="50.8144%" y="175.50">operator new</text></g><g><title>malloc (9,020 samples, 9.61%)</title><rect x="50.6933%" y="149" width="9.6056%" height="15" fill="rgb(233,208,19)" fg:x="47603" fg:w="9020"/><text x="50.9433%" y="159.50">malloc</text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;char const&amp;&gt;, std::tuple&lt;&gt; &gt; (9,241 samples, 9.84%)</title><rect x="50.5101%" y="245" width="9.8409%" height="15" fill="rgb(216,164,2)" fg:x="47431" fg:w="9241"/><text x="50.7601%" y="255.50">std::_Hashtabl..</text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;char const&amp;&gt;, std::tuple&lt;&gt; &gt; (9,241 samples, 9.84%)</title><rect x="50.5101%" y="229" width="9.8409%" height="15" fill="rgb(220,129,5)" fg:x="47431" fg:w="9241"/><text x="50.7601%" y="239.50">std::__detail:..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;char const&amp;&gt;, std::tuple&lt;&gt; &gt; (49 samples, 0.05%)</title><rect x="60.2988%" y="213" width="0.0522%" height="15" fill="rgb(242,17,10)" fg:x="56623" fg:w="49"/><text x="60.5488%" y="223.50"></text></g><g><title>decltype  (49 samples, 0.05%)</title><rect x="60.2988%" y="197" width="0.0522%" height="15" fill="rgb(242,107,0)" fg:x="56623" fg:w="49"/><text x="60.5488%" y="207.50"></text></g><g><title>std::pair&lt;char const, wolf::WordTrieNode*&gt;::pair&lt;char const&amp;&gt; (49 samples, 0.05%)</title><rect x="60.2988%" y="181" width="0.0522%" height="15" fill="rgb(251,28,31)" fg:x="56623" fg:w="49"/><text x="60.5488%" y="191.50"></text></g><g><title>std::pair&lt;char const, wolf::WordTrieNode*&gt;::pair&lt;char const&amp;, 0ul&gt; (49 samples, 0.05%)</title><rect x="60.2988%" y="165" width="0.0522%" height="15" fill="rgb(233,223,10)" fg:x="56623" fg:w="49"/><text x="60.5488%" y="175.50"></text></g><g><title>std::unordered_map&lt;char, wolf::WordTrieNode*, std::hash&lt;char&gt;, std::equal_to&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt; &gt;::operator[] (18,071 samples, 19.24%)</title><rect x="41.1356%" y="277" width="19.2441%" height="15" fill="rgb(215,21,27)" fg:x="38628" fg:w="18071"/><text x="41.3856%" y="287.50">std::unordered_map&lt;char, wolf:..</text></g><g><title>std::__detail::_Map_base&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (18,071 samples, 19.24%)</title><rect x="41.1356%" y="261" width="19.2441%" height="15" fill="rgb(232,23,21)" fg:x="38628" fg:w="18071"/><text x="41.3856%" y="271.50">std::__detail::_Map_base&lt;char,..</text></g><g><title>std::__detail::_Hash_code_base&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (27 samples, 0.03%)</title><rect x="60.3510%" y="245" width="0.0288%" height="15" fill="rgb(244,5,23)" fg:x="56672" fg:w="27"/><text x="60.6010%" y="255.50"></text></g><g><title>std::hash&lt;char&gt;::operator (27 samples, 0.03%)</title><rect x="60.3510%" y="229" width="0.0288%" height="15" fill="rgb(226,81,46)" fg:x="56672" fg:w="27"/><text x="60.6010%" y="239.50"></text></g><g><title>std::_Function_handler&lt;void (), wolf::MultiTrieFilter::insert_all(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;)::$_0&gt;::_M_invoke (43,315 samples, 46.13%)</title><rect x="14.3753%" y="357" width="46.1269%" height="15" fill="rgb(247,70,30)" fg:x="13499" fg:w="43315"/><text x="14.6253%" y="367.50">std::_Function_handler&lt;void (), wolf::MultiTrieFilter::insert_all(std::vecto..</text></g><g><title>std::enable_if&lt;is_invocable_r_v&lt;void, wolf::MultiTrieFilter::insert_all(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;)::$_0&amp;&gt;, void&gt;::type std::__invoke_r&lt;void, wolf::MultiTrieFilter::insert_all(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;)::$_0&amp;&gt; (43,304 samples, 46.12%)</title><rect x="14.3870%" y="341" width="46.1152%" height="15" fill="rgb(212,68,19)" fg:x="13510" fg:w="43304"/><text x="14.6370%" y="351.50">std::enable_if&lt;is_invocable_r_v&lt;void, wolf::MultiTrieFilter::insert_all(std:..</text></g><g><title>void std::__invoke_impl&lt;void, wolf::MultiTrieFilter::insert_all(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;)::$_0&amp;&gt; (43,304 samples, 46.12%)</title><rect x="14.3870%" y="325" width="46.1152%" height="15" fill="rgb(240,187,13)" fg:x="13510" fg:w="43304"/><text x="14.6370%" y="335.50">void std::__invoke_impl&lt;void, wolf::MultiTrieFilter::insert_all(std::vector&lt;..</text></g><g><title>wolf::MultiTrieFilter::insert_all (43,304 samples, 46.12%)</title><rect x="14.3870%" y="309" width="46.1152%" height="15" fill="rgb(223,113,26)" fg:x="13510" fg:w="43304"/><text x="14.6370%" y="319.50">wolf::MultiTrieFilter::insert_all</text></g><g><title>wolf::WordTrie::insert (43,260 samples, 46.07%)</title><rect x="14.4339%" y="293" width="46.0683%" height="15" fill="rgb(206,192,2)" fg:x="13554" fg:w="43260"/><text x="14.6839%" y="303.50">wolf::WordTrie::insert</text></g><g><title>wolf::WordTrieNode::WordTrieNode (115 samples, 0.12%)</title><rect x="60.3797%" y="277" width="0.1225%" height="15" fill="rgb(241,108,4)" fg:x="56699" fg:w="115"/><text x="60.6297%" y="287.50"></text></g><g><title>std::unordered_map&lt;char, wolf::WordTrieNode*, std::hash&lt;char&gt;, std::equal_to&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt; &gt;::unordered_map (115 samples, 0.12%)</title><rect x="60.3797%" y="261" width="0.1225%" height="15" fill="rgb(247,173,49)" fg:x="56699" fg:w="115"/><text x="60.6297%" y="271.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Hashtable (115 samples, 0.12%)</title><rect x="60.3797%" y="245" width="0.1225%" height="15" fill="rgb(224,114,35)" fg:x="56699" fg:w="115"/><text x="60.6297%" y="255.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_Prime_rehash_policy (53 samples, 0.06%)</title><rect x="60.4458%" y="229" width="0.0564%" height="15" fill="rgb(245,159,27)" fg:x="56761" fg:w="53"/><text x="60.6958%" y="239.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::push_back (157 samples, 0.17%)</title><rect x="60.6843%" y="309" width="0.1672%" height="15" fill="rgb(245,172,44)" fg:x="56985" fg:w="157"/><text x="60.9343%" y="319.50"></text></g><g><title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const* const&amp;&gt; (157 samples, 0.17%)</title><rect x="60.6843%" y="293" width="0.1672%" height="15" fill="rgb(236,23,11)" fg:x="56985" fg:w="157"/><text x="60.9343%" y="303.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::_M_allocate (157 samples, 0.17%)</title><rect x="60.6843%" y="277" width="0.1672%" height="15" fill="rgb(205,117,38)" fg:x="56985" fg:w="157"/><text x="60.9343%" y="287.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::allocate (157 samples, 0.17%)</title><rect x="60.6843%" y="261" width="0.1672%" height="15" fill="rgb(237,72,25)" fg:x="56985" fg:w="157"/><text x="60.9343%" y="271.50"></text></g><g><title>std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;::allocate (157 samples, 0.17%)</title><rect x="60.6843%" y="245" width="0.1672%" height="15" fill="rgb(244,70,9)" fg:x="56985" fg:w="157"/><text x="60.9343%" y="255.50"></text></g><g><title>std::__new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;::allocate (157 samples, 0.17%)</title><rect x="60.6843%" y="229" width="0.1672%" height="15" fill="rgb(217,125,39)" fg:x="56985" fg:w="157"/><text x="60.9343%" y="239.50"></text></g><g><title>operator new (157 samples, 0.17%)</title><rect x="60.6843%" y="213" width="0.1672%" height="15" fill="rgb(235,36,10)" fg:x="56985" fg:w="157"/><text x="60.9343%" y="223.50"></text></g><g><title>malloc (157 samples, 0.17%)</title><rect x="60.6843%" y="197" width="0.1672%" height="15" fill="rgb(251,123,47)" fg:x="56985" fg:w="157"/><text x="60.9343%" y="207.50"></text></g><g><title>[libc.so.6] (155 samples, 0.17%)</title><rect x="60.6864%" y="181" width="0.1651%" height="15" fill="rgb(221,13,13)" fg:x="56987" fg:w="155"/><text x="60.9364%" y="191.50"></text></g><g><title>[libc.so.6] (143 samples, 0.15%)</title><rect x="60.6992%" y="165" width="0.1523%" height="15" fill="rgb(238,131,9)" fg:x="56999" fg:w="143"/><text x="60.9492%" y="175.50"></text></g><g><title>[libc.so.6] (43 samples, 0.05%)</title><rect x="60.8057%" y="149" width="0.0458%" height="15" fill="rgb(211,50,8)" fg:x="57099" fg:w="43"/><text x="61.0557%" y="159.50"></text></g><g><title>[libc.so.6] (60 samples, 0.06%)</title><rect x="61.2296%" y="133" width="0.0639%" height="15" fill="rgb(245,182,24)" fg:x="57497" fg:w="60"/><text x="61.4796%" y="143.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::_M_allocate (360 samples, 0.38%)</title><rect x="60.9122%" y="261" width="0.3834%" height="15" fill="rgb(242,14,37)" fg:x="57199" fg:w="360"/><text x="61.1622%" y="271.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::allocate (360 samples, 0.38%)</title><rect x="60.9122%" y="245" width="0.3834%" height="15" fill="rgb(246,228,12)" fg:x="57199" fg:w="360"/><text x="61.1622%" y="255.50"></text></g><g><title>std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;::allocate (360 samples, 0.38%)</title><rect x="60.9122%" y="229" width="0.3834%" height="15" fill="rgb(213,55,15)" fg:x="57199" fg:w="360"/><text x="61.1622%" y="239.50"></text></g><g><title>std::__new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;::allocate (360 samples, 0.38%)</title><rect x="60.9122%" y="213" width="0.3834%" height="15" fill="rgb(209,9,3)" fg:x="57199" fg:w="360"/><text x="61.1622%" y="223.50"></text></g><g><title>operator new (359 samples, 0.38%)</title><rect x="60.9133%" y="197" width="0.3823%" height="15" fill="rgb(230,59,30)" fg:x="57200" fg:w="359"/><text x="61.1633%" y="207.50"></text></g><g><title>malloc (359 samples, 0.38%)</title><rect x="60.9133%" y="181" width="0.3823%" height="15" fill="rgb(209,121,21)" fg:x="57200" fg:w="359"/><text x="61.1633%" y="191.50"></text></g><g><title>[libc.so.6] (352 samples, 0.37%)</title><rect x="60.9207%" y="165" width="0.3749%" height="15" fill="rgb(220,109,13)" fg:x="57207" fg:w="352"/><text x="61.1707%" y="175.50"></text></g><g><title>[libc.so.6] (326 samples, 0.35%)</title><rect x="60.9484%" y="149" width="0.3472%" height="15" fill="rgb(232,18,1)" fg:x="57233" fg:w="326"/><text x="61.1984%" y="159.50"></text></g><g><title>wolf::WordTrie::collect_words_rec (747 samples, 0.80%)</title><rect x="60.5033%" y="357" width="0.7955%" height="15" fill="rgb(215,41,42)" fg:x="56815" fg:w="747"/><text x="60.7533%" y="367.50"></text></g><g><title>wolf::WordTrie::collect_words_rec (740 samples, 0.79%)</title><rect x="60.5107%" y="341" width="0.7880%" height="15" fill="rgb(224,123,36)" fg:x="56822" fg:w="740"/><text x="60.7607%" y="351.50"></text></g><g><title>wolf::WordTrie::collect_words_rec (686 samples, 0.73%)</title><rect x="60.5682%" y="325" width="0.7305%" height="15" fill="rgb(240,125,3)" fg:x="56876" fg:w="686"/><text x="60.8182%" y="335.50"></text></g><g><title>wolf::WordTrie::collect_words_rec (420 samples, 0.45%)</title><rect x="60.8515%" y="309" width="0.4473%" height="15" fill="rgb(205,98,50)" fg:x="57142" fg:w="420"/><text x="61.1015%" y="319.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::push_back (363 samples, 0.39%)</title><rect x="60.9122%" y="293" width="0.3866%" height="15" fill="rgb(205,185,37)" fg:x="57199" fg:w="363"/><text x="61.1622%" y="303.50"></text></g><g><title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const* const&amp;&gt; (363 samples, 0.39%)</title><rect x="60.9122%" y="277" width="0.3866%" height="15" fill="rgb(238,207,15)" fg:x="57199" fg:w="363"/><text x="61.1622%" y="287.50"></text></g><g><title>std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_base::_Result_base::_Deleter&gt; std::__invoke_impl&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_state&lt;std::function&lt;void ()&gt;, std::allocator&lt;int&gt;, void ()&gt;::_M_run()::{lambda()#1}, void&gt;&amp;&gt; (44,101 samples, 46.96%)</title><rect x="14.3657%" y="389" width="46.9639%" height="15" fill="rgb(213,199,42)" fg:x="13490" fg:w="44101"/><text x="14.6157%" y="399.50">std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_base::_Resul..</text></g><g><title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_state&lt;std::function&lt;void ()&gt;, std::allocator&lt;int&gt;, void ()&gt;::_M_run()::{lambda()#1}, void&gt;::operator (44,101 samples, 46.96%)</title><rect x="14.3657%" y="373" width="46.9639%" height="15" fill="rgb(235,201,11)" fg:x="13490" fg:w="44101"/><text x="14.6157%" y="383.50">std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;..</text></g><g><title>wolf::WordTrie::filter (29 samples, 0.03%)</title><rect x="61.2988%" y="357" width="0.0309%" height="15" fill="rgb(207,46,11)" fg:x="57562" fg:w="29"/><text x="61.5488%" y="367.50"></text></g><g><title>wolf::WordTrie::find (25 samples, 0.03%)</title><rect x="61.3030%" y="341" width="0.0266%" height="15" fill="rgb(241,35,35)" fg:x="57566" fg:w="25"/><text x="61.5530%" y="351.50"></text></g><g><title>std::__future_base::_State_baseV2::_M_do_set (44,108 samples, 46.97%)</title><rect x="14.3593%" y="437" width="46.9714%" height="15" fill="rgb(243,32,47)" fg:x="13484" fg:w="44108"/><text x="14.6093%" y="447.50">std::__future_base::_State_baseV2::_M_do_set</text></g><g><title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; (), std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_state&lt;std::function&lt;void ()&gt;, std::allocator&lt;int&gt;, void ()&gt;::_M_run()::{lambda()#1}, void&gt; &gt;::_M_invoke (44,106 samples, 46.97%)</title><rect x="14.3615%" y="421" width="46.9692%" height="15" fill="rgb(247,202,23)" fg:x="13486" fg:w="44106"/><text x="14.6115%" y="431.50">std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std:..</text></g><g><title>std::enable_if&lt;is_invocable_r_v&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_state&lt;std::function&lt;void ()&gt;, std::allocator&lt;int&gt;, void ()&gt;::_M_run()::{lambda()#1}, void&gt;&amp;&gt;, std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; &gt;::type std::__invoke_r&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_state&lt;std::function&lt;void ()&gt;, std::allocator&lt;int&gt;, void ()&gt;::_M_run()::{lambda()#1}, void&gt;&amp;&gt; (44,102 samples, 46.96%)</title><rect x="14.3657%" y="405" width="46.9650%" height="15" fill="rgb(219,102,11)" fg:x="13490" fg:w="44102"/><text x="14.6157%" y="415.50">std::enable_if&lt;is_invocable_r_v&lt;std::unique_ptr&lt;std::__future_base::_Result_b..</text></g><g><title>[libc.so.6] (44,304 samples, 47.18%)</title><rect x="14.1570%" y="453" width="47.1801%" height="15" fill="rgb(243,110,44)" fg:x="13294" fg:w="44304"/><text x="14.4070%" y="463.50">[libc.so.6]</text></g><g><title>std::__future_base::_State_baseV2::_M_set_result (44,352 samples, 47.23%)</title><rect x="14.1197%" y="501" width="47.2312%" height="15" fill="rgb(222,74,54)" fg:x="13259" fg:w="44352"/><text x="14.3697%" y="511.50">std::__future_base::_State_baseV2::_M_set_result</text></g><g><title>void std::call_once&lt;void (std::__future_base::_State_baseV2::*)(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*), std::__future_base::_State_baseV2*, std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*&gt; (44,317 samples, 47.19%)</title><rect x="14.1570%" y="485" width="47.1939%" height="15" fill="rgb(216,99,12)" fg:x="13294" fg:w="44317"/><text x="14.4070%" y="495.50">void std::call_once&lt;void (std::__future_base::_State_baseV2::*)(std::function..</text></g><g><title>__gthread_once (44,317 samples, 47.19%)</title><rect x="14.1570%" y="469" width="47.1939%" height="15" fill="rgb(226,22,26)" fg:x="13294" fg:w="44317"/><text x="14.4070%" y="479.50">__gthread_once</text></g><g><title>pthread_once (13 samples, 0.01%)</title><rect x="61.3371%" y="453" width="0.0138%" height="15" fill="rgb(217,163,10)" fg:x="57598" fg:w="13"/><text x="61.5871%" y="463.50"></text></g><g><title>std::__future_base::_Task_state&lt;std::function&lt;void ()&gt;, std::allocator&lt;int&gt;, void ()&gt;::_M_run (44,413 samples, 47.30%)</title><rect x="14.0558%" y="517" width="47.2962%" height="15" fill="rgb(213,25,53)" fg:x="13199" fg:w="44413"/><text x="14.3058%" y="527.50">std::__future_base::_Task_state&lt;std::function&lt;void ()&gt;, std::allocator&lt;int&gt;, v..</text></g><g><title>std::function&lt;void ()&gt;::function (22 samples, 0.02%)</title><rect x="61.3520%" y="517" width="0.0234%" height="15" fill="rgb(252,105,26)" fg:x="57612" fg:w="22"/><text x="61.6020%" y="527.50"></text></g><g><title>std::_Function_base::_Function_base (22 samples, 0.02%)</title><rect x="61.3520%" y="501" width="0.0234%" height="15" fill="rgb(220,39,43)" fg:x="57612" fg:w="22"/><text x="61.6020%" y="511.50"></text></g><g><title>[unknown] (48 samples, 0.05%)</title><rect x="61.7034%" y="485" width="0.0511%" height="15" fill="rgb(229,68,48)" fg:x="57942" fg:w="48"/><text x="61.9534%" y="495.50"></text></g><g><title>std::function&lt;void ()&gt;::function (479 samples, 0.51%)</title><rect x="61.3754%" y="501" width="0.5101%" height="15" fill="rgb(252,8,32)" fg:x="57634" fg:w="479"/><text x="61.6254%" y="511.50"></text></g><g><title>std::_Function_base::_Function_base (123 samples, 0.13%)</title><rect x="61.7546%" y="485" width="0.1310%" height="15" fill="rgb(223,20,43)" fg:x="57990" fg:w="123"/><text x="62.0046%" y="495.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="61.8728%" y="469" width="0.0128%" height="15" fill="rgb(229,81,49)" fg:x="58101" fg:w="12"/><text x="62.1228%" y="479.50"></text></g><g><title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;std::_Any_data&gt; &gt;, std::is_move_constructible&lt;std::_Any_data&gt;, std::is_move_assignable&lt;std::_Any_data&gt; &gt;::value, void&gt;::type std::swap&lt;std::_Any_data&gt; (42 samples, 0.04%)</title><rect x="61.8855%" y="485" width="0.0447%" height="15" fill="rgb(236,28,36)" fg:x="58113" fg:w="42"/><text x="62.1355%" y="495.50"></text></g><g><title>std::function&lt;void ()&gt;::operator= (523 samples, 0.56%)</title><rect x="61.3754%" y="517" width="0.5570%" height="15" fill="rgb(249,185,26)" fg:x="57634" fg:w="523"/><text x="61.6254%" y="527.50"></text></g><g><title>std::function&lt;void ()&gt;::swap (44 samples, 0.05%)</title><rect x="61.8855%" y="501" width="0.0469%" height="15" fill="rgb(249,174,33)" fg:x="58113" fg:w="44"/><text x="62.1355%" y="511.50"></text></g><g><title>cfree (157 samples, 0.17%)</title><rect x="61.9377%" y="405" width="0.1672%" height="15" fill="rgb(233,201,37)" fg:x="58162" fg:w="157"/><text x="62.1877%" y="415.50"></text></g><g><title>[libc.so.6] (145 samples, 0.15%)</title><rect x="61.9505%" y="389" width="0.1544%" height="15" fill="rgb(221,78,26)" fg:x="58174" fg:w="145"/><text x="62.2005%" y="399.50"></text></g><g><title>[libc.so.6] (142 samples, 0.15%)</title><rect x="61.9537%" y="373" width="0.1512%" height="15" fill="rgb(250,127,30)" fg:x="58177" fg:w="142"/><text x="62.2037%" y="383.50"></text></g><g><title>std::queue&lt;std::function&lt;void ()&gt;, std::deque&lt;std::function&lt;void ()&gt;, std::allocator&lt;std::function&lt;void ()&gt; &gt; &gt; &gt;::pop (163 samples, 0.17%)</title><rect x="61.9367%" y="517" width="0.1736%" height="15" fill="rgb(230,49,44)" fg:x="58161" fg:w="163"/><text x="62.1867%" y="527.50"></text></g><g><title>std::deque&lt;std::function&lt;void ()&gt;, std::allocator&lt;std::function&lt;void ()&gt; &gt; &gt;::pop_front (163 samples, 0.17%)</title><rect x="61.9367%" y="501" width="0.1736%" height="15" fill="rgb(229,67,23)" fg:x="58161" fg:w="163"/><text x="62.1867%" y="511.50"></text></g><g><title>std::deque&lt;std::function&lt;void ()&gt;, std::allocator&lt;std::function&lt;void ()&gt; &gt; &gt;::_M_pop_front_aux (163 samples, 0.17%)</title><rect x="61.9367%" y="485" width="0.1736%" height="15" fill="rgb(249,83,47)" fg:x="58161" fg:w="163"/><text x="62.1867%" y="495.50"></text></g><g><title>std::_Deque_base&lt;std::function&lt;void ()&gt;, std::allocator&lt;std::function&lt;void ()&gt; &gt; &gt;::_M_deallocate_node (163 samples, 0.17%)</title><rect x="61.9367%" y="469" width="0.1736%" height="15" fill="rgb(215,43,3)" fg:x="58161" fg:w="163"/><text x="62.1867%" y="479.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void ()&gt; &gt; &gt;::deallocate (163 samples, 0.17%)</title><rect x="61.9367%" y="453" width="0.1736%" height="15" fill="rgb(238,154,13)" fg:x="58161" fg:w="163"/><text x="62.1867%" y="463.50"></text></g><g><title>std::allocator&lt;std::function&lt;void ()&gt; &gt;::deallocate (163 samples, 0.17%)</title><rect x="61.9367%" y="437" width="0.1736%" height="15" fill="rgb(219,56,2)" fg:x="58161" fg:w="163"/><text x="62.1867%" y="447.50"></text></g><g><title>std::__new_allocator&lt;std::function&lt;void ()&gt; &gt;::deallocate (163 samples, 0.17%)</title><rect x="61.9367%" y="421" width="0.1736%" height="15" fill="rgb(233,0,4)" fg:x="58161" fg:w="163"/><text x="62.1867%" y="431.50"></text></g><g><title>[libc.so.6] (15 samples, 0.02%)</title><rect x="62.3967%" y="437" width="0.0160%" height="15" fill="rgb(235,30,7)" fg:x="58593" fg:w="15"/><text x="62.6467%" y="447.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unique_lock (287 samples, 0.31%)</title><rect x="62.1102%" y="517" width="0.3056%" height="15" fill="rgb(250,79,13)" fg:x="58324" fg:w="287"/><text x="62.3602%" y="527.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::lock (287 samples, 0.31%)</title><rect x="62.1102%" y="501" width="0.3056%" height="15" fill="rgb(211,146,34)" fg:x="58324" fg:w="287"/><text x="62.3602%" y="511.50"></text></g><g><title>std::mutex::lock (287 samples, 0.31%)</title><rect x="62.1102%" y="485" width="0.3056%" height="15" fill="rgb(228,22,38)" fg:x="58324" fg:w="287"/><text x="62.3602%" y="495.50"></text></g><g><title>__gthread_mutex_lock (287 samples, 0.31%)</title><rect x="62.1102%" y="469" width="0.3056%" height="15" fill="rgb(235,168,5)" fg:x="58324" fg:w="287"/><text x="62.3602%" y="479.50"></text></g><g><title>pthread_mutex_lock (285 samples, 0.30%)</title><rect x="62.1124%" y="453" width="0.3035%" height="15" fill="rgb(221,155,16)" fg:x="58326" fg:w="285"/><text x="62.3624%" y="463.50"></text></g><g><title>[libc.so.6] (95 samples, 0.10%)</title><rect x="62.6757%" y="437" width="0.1012%" height="15" fill="rgb(215,215,53)" fg:x="58855" fg:w="95"/><text x="62.9257%" y="447.50"></text></g><g><title>[unknown] (83 samples, 0.09%)</title><rect x="62.6885%" y="421" width="0.0884%" height="15" fill="rgb(223,4,10)" fg:x="58867" fg:w="83"/><text x="62.9385%" y="431.50"></text></g><g><title>[unknown] (82 samples, 0.09%)</title><rect x="62.6896%" y="405" width="0.0873%" height="15" fill="rgb(234,103,6)" fg:x="58868" fg:w="82"/><text x="62.9396%" y="415.50"></text></g><g><title>[unknown] (48 samples, 0.05%)</title><rect x="62.7258%" y="389" width="0.0511%" height="15" fill="rgb(227,97,0)" fg:x="58902" fg:w="48"/><text x="62.9758%" y="399.50"></text></g><g><title>[unknown] (19 samples, 0.02%)</title><rect x="62.7566%" y="373" width="0.0202%" height="15" fill="rgb(234,150,53)" fg:x="58931" fg:w="19"/><text x="63.0066%" y="383.50"></text></g><g><title>[unknown] (13 samples, 0.01%)</title><rect x="62.7630%" y="357" width="0.0138%" height="15" fill="rgb(228,201,54)" fg:x="58937" fg:w="13"/><text x="63.0130%" y="367.50"></text></g><g><title>[libc.so.6] (352 samples, 0.37%)</title><rect x="62.4233%" y="453" width="0.3749%" height="15" fill="rgb(222,22,37)" fg:x="58618" fg:w="352"/><text x="62.6733%" y="463.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="62.7769%" y="437" width="0.0213%" height="15" fill="rgb(237,53,32)" fg:x="58950" fg:w="20"/><text x="63.0269%" y="447.50"></text></g><g><title>pthread_mutex_unlock (136 samples, 0.14%)</title><rect x="62.7982%" y="453" width="0.1448%" height="15" fill="rgb(233,25,53)" fg:x="58970" fg:w="136"/><text x="63.0482%" y="463.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="62.9281%" y="437" width="0.0149%" height="15" fill="rgb(210,40,34)" fg:x="59092" fg:w="14"/><text x="63.1781%" y="447.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::~unique_lock (521 samples, 0.55%)</title><rect x="62.4159%" y="517" width="0.5548%" height="15" fill="rgb(241,220,44)" fg:x="58611" fg:w="521"/><text x="62.6659%" y="527.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (521 samples, 0.55%)</title><rect x="62.4159%" y="501" width="0.5548%" height="15" fill="rgb(235,28,35)" fg:x="58611" fg:w="521"/><text x="62.6659%" y="511.50"></text></g><g><title>std::mutex::unlock (514 samples, 0.55%)</title><rect x="62.4233%" y="485" width="0.5474%" height="15" fill="rgb(210,56,17)" fg:x="58618" fg:w="514"/><text x="62.6733%" y="495.50"></text></g><g><title>__gthread_mutex_unlock (514 samples, 0.55%)</title><rect x="62.4233%" y="469" width="0.5474%" height="15" fill="rgb(224,130,29)" fg:x="58618" fg:w="514"/><text x="62.6733%" y="479.50"></text></g><g><title>std::condition_variable::wait (20 samples, 0.02%)</title><rect x="62.9494%" y="453" width="0.0213%" height="15" fill="rgb(235,212,8)" fg:x="59112" fg:w="20"/><text x="63.1994%" y="463.50"></text></g><g><title>std::__condvar::wait (20 samples, 0.02%)</title><rect x="62.9494%" y="437" width="0.0213%" height="15" fill="rgb(223,33,50)" fg:x="59112" fg:w="20"/><text x="63.1994%" y="447.50"></text></g><g><title>[unknown] (20 samples, 0.02%)</title><rect x="62.9494%" y="421" width="0.0213%" height="15" fill="rgb(219,149,13)" fg:x="59112" fg:w="20"/><text x="63.1994%" y="431.50"></text></g><g><title>[unknown] (14 samples, 0.01%)</title><rect x="63.2529%" y="469" width="0.0149%" height="15" fill="rgb(250,156,29)" fg:x="59397" fg:w="14"/><text x="63.5029%" y="479.50"></text></g><g><title>[libc.so.6] (2,630 samples, 2.80%)</title><rect x="70.7041%" y="421" width="2.8007%" height="15" fill="rgb(216,193,19)" fg:x="66394" fg:w="2630"/><text x="70.9541%" y="431.50">[l..</text></g><g><title>[unknown] (666 samples, 0.71%)</title><rect x="72.7956%" y="405" width="0.7092%" height="15" fill="rgb(216,135,14)" fg:x="68358" fg:w="666"/><text x="73.0456%" y="415.50"></text></g><g><title>[unknown] (274 samples, 0.29%)</title><rect x="73.2131%" y="389" width="0.2918%" height="15" fill="rgb(241,47,5)" fg:x="68750" fg:w="274"/><text x="73.4631%" y="399.50"></text></g><g><title>[unknown] (161 samples, 0.17%)</title><rect x="73.3334%" y="373" width="0.1715%" height="15" fill="rgb(233,42,35)" fg:x="68863" fg:w="161"/><text x="73.5834%" y="383.50"></text></g><g><title>[unknown] (80 samples, 0.09%)</title><rect x="73.4197%" y="357" width="0.0852%" height="15" fill="rgb(231,13,6)" fg:x="68944" fg:w="80"/><text x="73.6697%" y="367.50"></text></g><g><title>[unknown] (65 samples, 0.07%)</title><rect x="73.4356%" y="341" width="0.0692%" height="15" fill="rgb(207,181,40)" fg:x="68959" fg:w="65"/><text x="73.6856%" y="351.50"></text></g><g><title>[libc.so.6] (7,409 samples, 7.89%)</title><rect x="66.3326%" y="437" width="7.8900%" height="15" fill="rgb(254,173,49)" fg:x="62289" fg:w="7409"/><text x="66.5826%" y="447.50">[libc.so.6]</text></g><g><title>[unknown] (674 samples, 0.72%)</title><rect x="73.5049%" y="421" width="0.7178%" height="15" fill="rgb(221,1,38)" fg:x="69024" fg:w="674"/><text x="73.7549%" y="431.50"></text></g><g><title>[unknown] (97 samples, 0.10%)</title><rect x="74.1193%" y="405" width="0.1033%" height="15" fill="rgb(206,124,46)" fg:x="69601" fg:w="97"/><text x="74.3693%" y="415.50"></text></g><g><title>[unknown] (57 samples, 0.06%)</title><rect x="74.1619%" y="389" width="0.0607%" height="15" fill="rgb(249,21,11)" fg:x="69641" fg:w="57"/><text x="74.4119%" y="399.50"></text></g><g><title>[unknown] (40 samples, 0.04%)</title><rect x="74.1800%" y="373" width="0.0426%" height="15" fill="rgb(222,201,40)" fg:x="69658" fg:w="40"/><text x="74.4300%" y="383.50"></text></g><g><title>[unknown] (35 samples, 0.04%)</title><rect x="74.1853%" y="357" width="0.0373%" height="15" fill="rgb(235,61,29)" fg:x="69663" fg:w="35"/><text x="74.4353%" y="367.50"></text></g><g><title>[unknown] (363 samples, 0.39%)</title><rect x="74.2226%" y="437" width="0.3866%" height="15" fill="rgb(219,207,3)" fg:x="69698" fg:w="363"/><text x="74.4726%" y="447.50"></text></g><g><title>[unknown] (32 samples, 0.03%)</title><rect x="74.5751%" y="421" width="0.0341%" height="15" fill="rgb(222,56,46)" fg:x="70029" fg:w="32"/><text x="74.8251%" y="431.50"></text></g><g><title>_pthread_cleanup_pop (251 samples, 0.27%)</title><rect x="74.6092%" y="437" width="0.2673%" height="15" fill="rgb(239,76,54)" fg:x="70061" fg:w="251"/><text x="74.8592%" y="447.50"></text></g><g><title>[unknown] (22 samples, 0.02%)</title><rect x="74.8530%" y="421" width="0.0234%" height="15" fill="rgb(231,124,27)" fg:x="70290" fg:w="22"/><text x="75.1030%" y="431.50"></text></g><g><title>std::condition_variable::wait (11,146 samples, 11.87%)</title><rect x="63.0101%" y="501" width="11.8696%" height="15" fill="rgb(249,195,6)" fg:x="59169" fg:w="11146"/><text x="63.2601%" y="511.50">std::condition_var..</text></g><g><title>std::__condvar::wait (11,137 samples, 11.86%)</title><rect x="63.0197%" y="485" width="11.8600%" height="15" fill="rgb(237,174,47)" fg:x="59178" fg:w="11137"/><text x="63.2697%" y="495.50">std::__condvar::wa..</text></g><g><title>std::condition_variable::wait (10,900 samples, 11.61%)</title><rect x="63.2721%" y="469" width="11.6076%" height="15" fill="rgb(206,201,31)" fg:x="59415" fg:w="10900"/><text x="63.5221%" y="479.50">std::condition_va..</text></g><g><title>pthread_cond_wait (10,900 samples, 11.61%)</title><rect x="63.2721%" y="453" width="11.6076%" height="15" fill="rgb(231,57,52)" fg:x="59415" fg:w="10900"/><text x="63.5221%" y="463.50">pthread_cond_wait</text></g><g><title>[unknown] (72 samples, 0.08%)</title><rect x="75.4909%" y="485" width="0.0767%" height="15" fill="rgb(248,177,22)" fg:x="70889" fg:w="72"/><text x="75.7409%" y="495.50"></text></g><g><title>[libc.so.6] (70,449 samples, 75.02%)</title><rect x="0.6933%" y="565" width="75.0224%" height="15" fill="rgb(215,211,37)" fg:x="651" fg:w="70449"/><text x="0.9433%" y="575.50">[libc.so.6]</text></g><g><title>execute_native_thread_routine (58,477 samples, 62.27%)</title><rect x="13.4425%" y="549" width="62.2732%" height="15" fill="rgb(241,128,51)" fg:x="12623" fg:w="58477"/><text x="13.6925%" y="559.50">execute_native_thread_routine</text></g><g><title>wolf::ThreadPool::ThreadPool (58,248 samples, 62.03%)</title><rect x="13.6863%" y="533" width="62.0293%" height="15" fill="rgb(227,165,31)" fg:x="12852" fg:w="58248"/><text x="13.9363%" y="543.50">wolf::ThreadPool::ThreadPool</text></g><g><title>void std::condition_variable::wait&lt;wolf::ThreadPool::ThreadPool(unsigned long)::{lambda()#1}::operator()() const::{lambda()#1}&gt; (11,968 samples, 12.74%)</title><rect x="62.9707%" y="517" width="12.7449%" height="15" fill="rgb(228,167,24)" fg:x="59132" fg:w="11968"/><text x="63.2207%" y="527.50">void std::condition..</text></g><g><title>wolf::ThreadPool::ThreadPool (785 samples, 0.84%)</title><rect x="74.8797%" y="501" width="0.8360%" height="15" fill="rgb(228,143,12)" fg:x="70315" fg:w="785"/><text x="75.1297%" y="511.50"></text></g><g><title>std::queue&lt;std::function&lt;void ()&gt;, std::deque&lt;std::function&lt;void ()&gt;, std::allocator&lt;std::function&lt;void ()&gt; &gt; &gt; &gt;::empty (139 samples, 0.15%)</title><rect x="75.5676%" y="485" width="0.1480%" height="15" fill="rgb(249,149,8)" fg:x="70961" fg:w="139"/><text x="75.8176%" y="495.50"></text></g><g><title>std::deque&lt;std::function&lt;void ()&gt;, std::allocator&lt;std::function&lt;void ()&gt; &gt; &gt;::empty (139 samples, 0.15%)</title><rect x="75.5676%" y="469" width="0.1480%" height="15" fill="rgb(243,35,44)" fg:x="70961" fg:w="139"/><text x="75.8176%" y="479.50"></text></g><g><title>std::operator== (139 samples, 0.15%)</title><rect x="75.5676%" y="453" width="0.1480%" height="15" fill="rgb(246,89,9)" fg:x="70961" fg:w="139"/><text x="75.8176%" y="463.50"></text></g><g><title>[unknown] (15 samples, 0.02%)</title><rect x="75.6997%" y="437" width="0.0160%" height="15" fill="rgb(233,213,13)" fg:x="71085" fg:w="15"/><text x="75.9497%" y="447.50"></text></g><g><title>[libc.so.6] (70,887 samples, 75.49%)</title><rect x="0.6294%" y="581" width="75.4888%" height="15" fill="rgb(233,141,41)" fg:x="591" fg:w="70887"/><text x="0.8794%" y="591.50">[libc.so.6]</text></g><g><title>[unknown] (378 samples, 0.40%)</title><rect x="75.7156%" y="565" width="0.4025%" height="15" fill="rgb(239,167,4)" fg:x="71100" fg:w="378"/><text x="75.9656%" y="575.50"></text></g><g><title>[unknown] (2,818 samples, 3.00%)</title><rect x="76.1182%" y="581" width="3.0009%" height="15" fill="rgb(209,217,16)" fg:x="71478" fg:w="2818"/><text x="76.3682%" y="591.50">[un..</text></g><g><title>wolf::ThreadPool::ThreadPool (10 samples, 0.01%)</title><rect x="79.1266%" y="389" width="0.0106%" height="15" fill="rgb(219,88,35)" fg:x="74303" fg:w="10"/><text x="79.3766%" y="399.50"></text></g><g><title>wolf::MultiTrieFilter::MultiTrieFilter (12 samples, 0.01%)</title><rect x="79.1266%" y="405" width="0.0128%" height="15" fill="rgb(220,193,23)" fg:x="74303" fg:w="12"/><text x="79.3766%" y="415.50"></text></g><g><title>std::__basic_future&lt;void&gt;::wait (12 samples, 0.01%)</title><rect x="79.1479%" y="389" width="0.0128%" height="15" fill="rgb(230,90,52)" fg:x="74323" fg:w="12"/><text x="79.3979%" y="399.50"></text></g><g><title>std::__future_base::_State_baseV2::wait (12 samples, 0.01%)</title><rect x="79.1479%" y="373" width="0.0128%" height="15" fill="rgb(252,106,19)" fg:x="74323" fg:w="12"/><text x="79.3979%" y="383.50"></text></g><g><title>decltype (15 samples, 0.02%)</title><rect x="79.1692%" y="373" width="0.0160%" height="15" fill="rgb(206,74,20)" fg:x="74343" fg:w="15"/><text x="79.4192%" y="383.50"></text></g><g><title>std::function&lt;void ()&gt;&amp; std::deque&lt;std::function&lt;void ()&gt;, std::allocator&lt;std::function&lt;void ()&gt; &gt; &gt;::emplace_back&lt;wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt; (15 samples, 0.02%)</title><rect x="79.1692%" y="357" width="0.0160%" height="15" fill="rgb(230,138,44)" fg:x="74343" fg:w="15"/><text x="79.4192%" y="367.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::function&lt;void ()&gt; &gt; &gt;::construct&lt;std::function&lt;void ()&gt;, wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt; (15 samples, 0.02%)</title><rect x="79.1692%" y="341" width="0.0160%" height="15" fill="rgb(235,182,43)" fg:x="74343" fg:w="15"/><text x="79.4192%" y="351.50"></text></g><g><title>decltype  (15 samples, 0.02%)</title><rect x="79.1692%" y="325" width="0.0160%" height="15" fill="rgb(242,16,51)" fg:x="74343" fg:w="15"/><text x="79.4192%" y="335.50"></text></g><g><title>std::function&lt;void ()&gt;::function&lt;wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}, void&gt; (15 samples, 0.02%)</title><rect x="79.1692%" y="309" width="0.0160%" height="15" fill="rgb(248,9,4)" fg:x="74343" fg:w="15"/><text x="79.4192%" y="319.50"></text></g><g><title>void std::_Function_base::_Base_manager&lt;wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt;::_M_init_functor&lt;wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt; (13 samples, 0.01%)</title><rect x="79.1713%" y="293" width="0.0138%" height="15" fill="rgb(210,31,22)" fg:x="74345" fg:w="13"/><text x="79.4213%" y="303.50"></text></g><g><title>void std::_Function_base::_Base_manager&lt;wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt;::_M_create&lt;wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt; (13 samples, 0.01%)</title><rect x="79.1713%" y="277" width="0.0138%" height="15" fill="rgb(239,54,39)" fg:x="74345" fg:w="13"/><text x="79.4213%" y="287.50"></text></g><g><title>operator new (13 samples, 0.01%)</title><rect x="79.1713%" y="261" width="0.0138%" height="15" fill="rgb(230,99,41)" fg:x="74345" fg:w="13"/><text x="79.4213%" y="271.50"></text></g><g><title>malloc (13 samples, 0.01%)</title><rect x="79.1713%" y="245" width="0.0138%" height="15" fill="rgb(253,106,12)" fg:x="74345" fg:w="13"/><text x="79.4213%" y="255.50"></text></g><g><title>wolf::MultiTrieFilter::filter (61 samples, 0.06%)</title><rect x="79.1425%" y="405" width="0.0650%" height="15" fill="rgb(213,46,41)" fg:x="74318" fg:w="61"/><text x="79.3925%" y="415.50"></text></g><g><title>wolf::ThreadPool::enqueue (40 samples, 0.04%)</title><rect x="79.1649%" y="389" width="0.0426%" height="15" fill="rgb(215,133,35)" fg:x="74339" fg:w="40"/><text x="79.4149%" y="399.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unique_lock (11 samples, 0.01%)</title><rect x="79.1958%" y="373" width="0.0117%" height="15" fill="rgb(213,28,5)" fg:x="74368" fg:w="11"/><text x="79.4458%" y="383.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::lock (11 samples, 0.01%)</title><rect x="79.1958%" y="357" width="0.0117%" height="15" fill="rgb(215,77,49)" fg:x="74368" fg:w="11"/><text x="79.4458%" y="367.50"></text></g><g><title>std::mutex::lock (11 samples, 0.01%)</title><rect x="79.1958%" y="341" width="0.0117%" height="15" fill="rgb(248,100,22)" fg:x="74368" fg:w="11"/><text x="79.4458%" y="351.50"></text></g><g><title>__gthread_mutex_lock (11 samples, 0.01%)</title><rect x="79.1958%" y="325" width="0.0117%" height="15" fill="rgb(208,67,9)" fg:x="74368" fg:w="11"/><text x="79.4458%" y="335.50"></text></g><g><title>pthread_mutex_lock (11 samples, 0.01%)</title><rect x="79.1958%" y="309" width="0.0117%" height="15" fill="rgb(219,133,21)" fg:x="74368" fg:w="11"/><text x="79.4458%" y="319.50"></text></g><g><title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load (13 samples, 0.01%)</title><rect x="79.2309%" y="341" width="0.0138%" height="15" fill="rgb(246,46,29)" fg:x="74401" fg:w="13"/><text x="79.4809%" y="351.50"></text></g><g><title>std::__atomic_base&lt;unsigned int&gt;::load (11 samples, 0.01%)</title><rect x="79.2330%" y="325" width="0.0117%" height="15" fill="rgb(246,185,52)" fg:x="74403" fg:w="11"/><text x="79.4830%" y="335.50"></text></g><g><title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load (31 samples, 0.03%)</title><rect x="79.2490%" y="309" width="0.0330%" height="15" fill="rgb(252,136,11)" fg:x="74418" fg:w="31"/><text x="79.4990%" y="319.50"></text></g><g><title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_when_equal (129 samples, 0.14%)</title><rect x="79.2309%" y="357" width="0.1374%" height="15" fill="rgb(219,138,53)" fg:x="74401" fg:w="129"/><text x="79.4809%" y="367.50"></text></g><g><title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_and_test (116 samples, 0.12%)</title><rect x="79.2448%" y="341" width="0.1235%" height="15" fill="rgb(211,51,23)" fg:x="74414" fg:w="116"/><text x="79.4948%" y="351.50"></text></g><g><title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_and_test_until (116 samples, 0.12%)</title><rect x="79.2448%" y="325" width="0.1235%" height="15" fill="rgb(247,221,28)" fg:x="74414" fg:w="116"/><text x="79.4948%" y="335.50"></text></g><g><title>std::__atomic_futex_unsigned_base::_M_futex_wait_until (81 samples, 0.09%)</title><rect x="79.2820%" y="309" width="0.0863%" height="15" fill="rgb(251,222,45)" fg:x="74449" fg:w="81"/><text x="79.5320%" y="319.50"></text></g><g><title>syscall (16 samples, 0.02%)</title><rect x="79.3513%" y="293" width="0.0170%" height="15" fill="rgb(217,162,53)" fg:x="74514" fg:w="16"/><text x="79.6013%" y="303.50"></text></g><g><title>std::__future_base::_State_baseV2::wait (157 samples, 0.17%)</title><rect x="79.2107%" y="373" width="0.1672%" height="15" fill="rgb(229,93,14)" fg:x="74382" fg:w="157"/><text x="79.4607%" y="383.50"></text></g><g><title>std::__basic_future&lt;void&gt;::wait (174 samples, 0.19%)</title><rect x="79.2107%" y="389" width="0.1853%" height="15" fill="rgb(209,67,49)" fg:x="74382" fg:w="174"/><text x="79.4607%" y="399.50"></text></g><g><title>void std::__future_base::_State_baseV2::_S_check&lt;std::__future_base::_State_baseV2&gt; (17 samples, 0.02%)</title><rect x="79.3779%" y="373" width="0.0181%" height="15" fill="rgb(213,87,29)" fg:x="74539" fg:w="17"/><text x="79.6279%" y="383.50"></text></g><g><title>std::__shared_ptr&lt;std::__future_base::_State_baseV2, (__gnu_cxx::_Lock_policy)2&gt;::operator bool (17 samples, 0.02%)</title><rect x="79.3779%" y="357" width="0.0181%" height="15" fill="rgb(205,151,52)" fg:x="74539" fg:w="17"/><text x="79.6279%" y="367.50"></text></g><g><title>std::vector&lt;std::future&lt;void&gt;, std::allocator&lt;std::future&lt;void&gt; &gt; &gt;::~vector (20 samples, 0.02%)</title><rect x="79.4024%" y="389" width="0.0213%" height="15" fill="rgb(253,215,39)" fg:x="74562" fg:w="20"/><text x="79.6524%" y="399.50"></text></g><g><title>void std::_Destroy&lt;std::future&lt;void&gt;*, std::future&lt;void&gt; &gt; (19 samples, 0.02%)</title><rect x="79.4034%" y="373" width="0.0202%" height="15" fill="rgb(221,220,41)" fg:x="74563" fg:w="19"/><text x="79.6534%" y="383.50"></text></g><g><title>void std::_Destroy&lt;std::future&lt;void&gt;*&gt; (19 samples, 0.02%)</title><rect x="79.4034%" y="357" width="0.0202%" height="15" fill="rgb(218,133,21)" fg:x="74563" fg:w="19"/><text x="79.6534%" y="367.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::future&lt;void&gt;*&gt; (19 samples, 0.02%)</title><rect x="79.4034%" y="341" width="0.0202%" height="15" fill="rgb(221,193,43)" fg:x="74563" fg:w="19"/><text x="79.6534%" y="351.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_Task_state&lt;std::function&lt;void ()&gt;, std::allocator&lt;int&gt;, void ()&gt;, std::allocator&lt;int&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (16 samples, 0.02%)</title><rect x="79.4066%" y="325" width="0.0170%" height="15" fill="rgb(240,128,52)" fg:x="74566" fg:w="16"/><text x="79.6566%" y="335.50"></text></g><g><title>[libc.so.6] (13 samples, 0.01%)</title><rect x="79.4876%" y="229" width="0.0138%" height="15" fill="rgb(253,114,12)" fg:x="74642" fg:w="13"/><text x="79.7376%" y="239.50"></text></g><g><title>operator new (47 samples, 0.05%)</title><rect x="79.4524%" y="261" width="0.0501%" height="15" fill="rgb(215,223,47)" fg:x="74609" fg:w="47"/><text x="79.7024%" y="271.50"></text></g><g><title>malloc (42 samples, 0.04%)</title><rect x="79.4577%" y="245" width="0.0447%" height="15" fill="rgb(248,225,23)" fg:x="74614" fg:w="42"/><text x="79.7077%" y="255.50"></text></g><g><title>decltype (53 samples, 0.06%)</title><rect x="79.4482%" y="373" width="0.0564%" height="15" fill="rgb(250,108,0)" fg:x="74605" fg:w="53"/><text x="79.6982%" y="383.50"></text></g><g><title>std::function&lt;void ()&gt;&amp; std::deque&lt;std::function&lt;void ()&gt;, std::allocator&lt;std::function&lt;void ()&gt; &gt; &gt;::emplace_back&lt;wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt; (53 samples, 0.06%)</title><rect x="79.4482%" y="357" width="0.0564%" height="15" fill="rgb(228,208,7)" fg:x="74605" fg:w="53"/><text x="79.6982%" y="367.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::function&lt;void ()&gt; &gt; &gt;::construct&lt;std::function&lt;void ()&gt;, wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt; (53 samples, 0.06%)</title><rect x="79.4482%" y="341" width="0.0564%" height="15" fill="rgb(244,45,10)" fg:x="74605" fg:w="53"/><text x="79.6982%" y="351.50"></text></g><g><title>decltype  (53 samples, 0.06%)</title><rect x="79.4482%" y="325" width="0.0564%" height="15" fill="rgb(207,125,25)" fg:x="74605" fg:w="53"/><text x="79.6982%" y="335.50"></text></g><g><title>std::function&lt;void ()&gt;::function&lt;wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}, void&gt; (53 samples, 0.06%)</title><rect x="79.4482%" y="309" width="0.0564%" height="15" fill="rgb(210,195,18)" fg:x="74605" fg:w="53"/><text x="79.6982%" y="319.50"></text></g><g><title>void std::_Function_base::_Base_manager&lt;wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt;::_M_init_functor&lt;wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt; (49 samples, 0.05%)</title><rect x="79.4524%" y="293" width="0.0522%" height="15" fill="rgb(249,80,12)" fg:x="74609" fg:w="49"/><text x="79.7024%" y="303.50"></text></g><g><title>void std::_Function_base::_Base_manager&lt;wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt;::_M_create&lt;wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt; (49 samples, 0.05%)</title><rect x="79.4524%" y="277" width="0.0522%" height="15" fill="rgb(221,65,9)" fg:x="74609" fg:w="49"/><text x="79.7024%" y="287.50"></text></g><g><title>std::condition_variable::notify_one (37 samples, 0.04%)</title><rect x="79.5046%" y="373" width="0.0394%" height="15" fill="rgb(235,49,36)" fg:x="74658" fg:w="37"/><text x="79.7546%" y="383.50"></text></g><g><title>std::__condvar::notify_one (37 samples, 0.04%)</title><rect x="79.5046%" y="357" width="0.0394%" height="15" fill="rgb(225,32,20)" fg:x="74658" fg:w="37"/><text x="79.7546%" y="367.50"></text></g><g><title>std::condition_variable::notify_one (36 samples, 0.04%)</title><rect x="79.5057%" y="341" width="0.0383%" height="15" fill="rgb(215,141,46)" fg:x="74659" fg:w="36"/><text x="79.7557%" y="351.50"></text></g><g><title>pthread_cond_signal (36 samples, 0.04%)</title><rect x="79.5057%" y="325" width="0.0383%" height="15" fill="rgb(250,160,47)" fg:x="74659" fg:w="36"/><text x="79.7557%" y="335.50"></text></g><g><title>[unknown] (11 samples, 0.01%)</title><rect x="79.5323%" y="309" width="0.0117%" height="15" fill="rgb(216,222,40)" fg:x="74684" fg:w="11"/><text x="79.7823%" y="319.50"></text></g><g><title>std::shared_ptr&lt;std::packaged_task&lt;void ()&gt; &gt; std::make_shared&lt;std::packaged_task&lt;void ()&gt;, std::function&lt;void ()&gt; &gt; (13 samples, 0.01%)</title><rect x="79.5451%" y="373" width="0.0138%" height="15" fill="rgb(234,217,39)" fg:x="74696" fg:w="13"/><text x="79.7951%" y="383.50"></text></g><g><title>std::shared_ptr&lt;std::packaged_task&lt;void ()&gt; &gt;::shared_ptr&lt;std::allocator&lt;void&gt;, std::function&lt;void ()&gt; &gt; (13 samples, 0.01%)</title><rect x="79.5451%" y="357" width="0.0138%" height="15" fill="rgb(207,178,40)" fg:x="74696" fg:w="13"/><text x="79.7951%" y="367.50"></text></g><g><title>std::__shared_ptr&lt;std::packaged_task&lt;void ()&gt;, (__gnu_cxx::_Lock_policy)2&gt;::__shared_ptr&lt;std::allocator&lt;void&gt;, std::function&lt;void ()&gt; &gt; (13 samples, 0.01%)</title><rect x="79.5451%" y="341" width="0.0138%" height="15" fill="rgb(221,136,13)" fg:x="74696" fg:w="13"/><text x="79.7951%" y="351.50"></text></g><g><title>std::__shared_count&lt;(__gnu_cxx::_Lock_policy)2&gt;::__shared_count&lt;std::packaged_task&lt;void ()&gt;, std::allocator&lt;void&gt;, std::function&lt;void ()&gt; &gt; (13 samples, 0.01%)</title><rect x="79.5451%" y="325" width="0.0138%" height="15" fill="rgb(249,199,10)" fg:x="74696" fg:w="13"/><text x="79.7951%" y="335.50"></text></g><g><title>std::__allocated_ptr&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::packaged_task&lt;void ()&gt;, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; std::__allocate_guarded&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::packaged_task&lt;void ()&gt;, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt; (10 samples, 0.01%)</title><rect x="79.5483%" y="309" width="0.0106%" height="15" fill="rgb(249,222,13)" fg:x="74699" fg:w="10"/><text x="79.7983%" y="319.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::packaged_task&lt;void ()&gt;, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt; &gt;::allocate (10 samples, 0.01%)</title><rect x="79.5483%" y="293" width="0.0106%" height="15" fill="rgb(244,185,38)" fg:x="74699" fg:w="10"/><text x="79.7983%" y="303.50"></text></g><g><title>std::allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::packaged_task&lt;void ()&gt;, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (10 samples, 0.01%)</title><rect x="79.5483%" y="277" width="0.0106%" height="15" fill="rgb(236,202,9)" fg:x="74699" fg:w="10"/><text x="79.7983%" y="287.50"></text></g><g><title>std::__new_allocator&lt;std::_Sp_counted_ptr_inplace&lt;std::packaged_task&lt;void ()&gt;, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt; &gt;::allocate (10 samples, 0.01%)</title><rect x="79.5483%" y="261" width="0.0106%" height="15" fill="rgb(250,229,37)" fg:x="74699" fg:w="10"/><text x="79.7983%" y="271.50"></text></g><g><title>operator new (10 samples, 0.01%)</title><rect x="79.5483%" y="245" width="0.0106%" height="15" fill="rgb(206,174,23)" fg:x="74699" fg:w="10"/><text x="79.7983%" y="255.50"></text></g><g><title>[libc.so.6] (22 samples, 0.02%)</title><rect x="79.5962%" y="293" width="0.0234%" height="15" fill="rgb(211,33,43)" fg:x="74744" fg:w="22"/><text x="79.8462%" y="303.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="79.6068%" y="277" width="0.0128%" height="15" fill="rgb(245,58,50)" fg:x="74754" fg:w="12"/><text x="79.8568%" y="287.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unique_lock (55 samples, 0.06%)</title><rect x="79.5632%" y="373" width="0.0586%" height="15" fill="rgb(244,68,36)" fg:x="74713" fg:w="55"/><text x="79.8132%" y="383.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::lock (55 samples, 0.06%)</title><rect x="79.5632%" y="357" width="0.0586%" height="15" fill="rgb(232,229,15)" fg:x="74713" fg:w="55"/><text x="79.8132%" y="367.50"></text></g><g><title>std::mutex::lock (55 samples, 0.06%)</title><rect x="79.5632%" y="341" width="0.0586%" height="15" fill="rgb(254,30,23)" fg:x="74713" fg:w="55"/><text x="79.8132%" y="351.50"></text></g><g><title>__gthread_mutex_lock (55 samples, 0.06%)</title><rect x="79.5632%" y="325" width="0.0586%" height="15" fill="rgb(235,160,14)" fg:x="74713" fg:w="55"/><text x="79.8132%" y="335.50"></text></g><g><title>pthread_mutex_lock (55 samples, 0.06%)</title><rect x="79.5632%" y="309" width="0.0586%" height="15" fill="rgb(212,155,44)" fg:x="74713" fg:w="55"/><text x="79.8132%" y="319.50"></text></g><g><title>[libc.so.6] (11 samples, 0.01%)</title><rect x="79.6217%" y="309" width="0.0117%" height="15" fill="rgb(226,2,50)" fg:x="74768" fg:w="11"/><text x="79.8717%" y="319.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::~unique_lock (15 samples, 0.02%)</title><rect x="79.6217%" y="373" width="0.0160%" height="15" fill="rgb(234,177,6)" fg:x="74768" fg:w="15"/><text x="79.8717%" y="383.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (15 samples, 0.02%)</title><rect x="79.6217%" y="357" width="0.0160%" height="15" fill="rgb(217,24,9)" fg:x="74768" fg:w="15"/><text x="79.8717%" y="367.50"></text></g><g><title>std::mutex::unlock (15 samples, 0.02%)</title><rect x="79.6217%" y="341" width="0.0160%" height="15" fill="rgb(220,13,46)" fg:x="74768" fg:w="15"/><text x="79.8717%" y="351.50"></text></g><g><title>__gthread_mutex_unlock (15 samples, 0.02%)</title><rect x="79.6217%" y="325" width="0.0160%" height="15" fill="rgb(239,221,27)" fg:x="74768" fg:w="15"/><text x="79.8717%" y="335.50"></text></g><g><title>std::_Deque_base&lt;std::function&lt;void ()&gt;, std::allocator&lt;std::function&lt;void ()&gt; &gt; &gt;::_M_allocate_node (13 samples, 0.01%)</title><rect x="79.6377%" y="357" width="0.0138%" height="15" fill="rgb(222,198,25)" fg:x="74783" fg:w="13"/><text x="79.8877%" y="367.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::function&lt;void ()&gt; &gt; &gt;::allocate (13 samples, 0.01%)</title><rect x="79.6377%" y="341" width="0.0138%" height="15" fill="rgb(211,99,13)" fg:x="74783" fg:w="13"/><text x="79.8877%" y="351.50"></text></g><g><title>std::allocator&lt;std::function&lt;void ()&gt; &gt;::allocate (13 samples, 0.01%)</title><rect x="79.6377%" y="325" width="0.0138%" height="15" fill="rgb(232,111,31)" fg:x="74783" fg:w="13"/><text x="79.8877%" y="335.50"></text></g><g><title>std::__new_allocator&lt;std::function&lt;void ()&gt; &gt;::allocate (13 samples, 0.01%)</title><rect x="79.6377%" y="309" width="0.0138%" height="15" fill="rgb(245,82,37)" fg:x="74783" fg:w="13"/><text x="79.8877%" y="319.50"></text></g><g><title>operator new (13 samples, 0.01%)</title><rect x="79.6377%" y="293" width="0.0138%" height="15" fill="rgb(227,149,46)" fg:x="74783" fg:w="13"/><text x="79.8877%" y="303.50"></text></g><g><title>malloc (13 samples, 0.01%)</title><rect x="79.6377%" y="277" width="0.0138%" height="15" fill="rgb(218,36,50)" fg:x="74783" fg:w="13"/><text x="79.8877%" y="287.50"></text></g><g><title>wolf::MultiTrieFilter::insert_all (426 samples, 0.45%)</title><rect x="79.2075%" y="405" width="0.4537%" height="15" fill="rgb(226,80,48)" fg:x="74379" fg:w="426"/><text x="79.4575%" y="415.50"></text></g><g><title>wolf::ThreadPool::enqueue (223 samples, 0.24%)</title><rect x="79.4237%" y="389" width="0.2375%" height="15" fill="rgb(238,224,15)" fg:x="74582" fg:w="223"/><text x="79.6737%" y="399.50"></text></g><g><title>void std::deque&lt;std::function&lt;void ()&gt;, std::allocator&lt;std::function&lt;void ()&gt; &gt; &gt;::_M_push_back_aux&lt;wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt; (22 samples, 0.02%)</title><rect x="79.6377%" y="373" width="0.0234%" height="15" fill="rgb(241,136,10)" fg:x="74783" fg:w="22"/><text x="79.8877%" y="383.50"></text></g><g><title>cfree (11 samples, 0.01%)</title><rect x="79.6611%" y="389" width="0.0117%" height="15" fill="rgb(208,32,45)" fg:x="74805" fg:w="11"/><text x="79.9111%" y="399.50"></text></g><g><title>[libc.so.6] (11 samples, 0.01%)</title><rect x="79.6611%" y="373" width="0.0117%" height="15" fill="rgb(207,135,9)" fg:x="74805" fg:w="11"/><text x="79.9111%" y="383.50"></text></g><g><title>[libc.so.6] (11 samples, 0.01%)</title><rect x="79.6611%" y="357" width="0.0117%" height="15" fill="rgb(206,86,44)" fg:x="74805" fg:w="11"/><text x="79.9111%" y="367.50"></text></g><g><title>[libc.so.6] (10 samples, 0.01%)</title><rect x="79.6622%" y="341" width="0.0106%" height="15" fill="rgb(245,177,15)" fg:x="74806" fg:w="10"/><text x="79.9122%" y="351.50"></text></g><g><title>cfree (37 samples, 0.04%)</title><rect x="79.6878%" y="117" width="0.0394%" height="15" fill="rgb(206,64,50)" fg:x="74830" fg:w="37"/><text x="79.9378%" y="127.50"></text></g><g><title>[libc.so.6] (29 samples, 0.03%)</title><rect x="79.6963%" y="101" width="0.0309%" height="15" fill="rgb(234,36,40)" fg:x="74838" fg:w="29"/><text x="79.9463%" y="111.50"></text></g><g><title>std::_Function_handler&lt;void (wolf::WordTrieNode*), wolf::WordTrie::clear()::$_0&gt;::_M_invoke (42 samples, 0.04%)</title><rect x="79.6835%" y="341" width="0.0447%" height="15" fill="rgb(213,64,8)" fg:x="74826" fg:w="42"/><text x="79.9335%" y="351.50"></text></g><g><title>std::enable_if&lt;is_invocable_r_v&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt;, void&gt;::type std::__invoke_r&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt; (42 samples, 0.04%)</title><rect x="79.6835%" y="325" width="0.0447%" height="15" fill="rgb(210,75,36)" fg:x="74826" fg:w="42"/><text x="79.9335%" y="335.50"></text></g><g><title>void std::__invoke_impl&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt; (42 samples, 0.04%)</title><rect x="79.6835%" y="309" width="0.0447%" height="15" fill="rgb(229,88,21)" fg:x="74826" fg:w="42"/><text x="79.9335%" y="319.50"></text></g><g><title>wolf::WordTrie::clear (42 samples, 0.04%)</title><rect x="79.6835%" y="293" width="0.0447%" height="15" fill="rgb(252,204,47)" fg:x="74826" fg:w="42"/><text x="79.9335%" y="303.50"></text></g><g><title>wolf::WordTrieNode::~WordTrieNode (42 samples, 0.04%)</title><rect x="79.6835%" y="277" width="0.0447%" height="15" fill="rgb(208,77,27)" fg:x="74826" fg:w="42"/><text x="79.9335%" y="287.50"></text></g><g><title>std::unordered_map&lt;char, wolf::WordTrieNode*, std::hash&lt;char&gt;, std::equal_to&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt; &gt;::~unordered_map (42 samples, 0.04%)</title><rect x="79.6835%" y="261" width="0.0447%" height="15" fill="rgb(221,76,26)" fg:x="74826" fg:w="42"/><text x="79.9335%" y="271.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (42 samples, 0.04%)</title><rect x="79.6835%" y="245" width="0.0447%" height="15" fill="rgb(225,139,18)" fg:x="74826" fg:w="42"/><text x="79.9335%" y="255.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (38 samples, 0.04%)</title><rect x="79.6878%" y="229" width="0.0405%" height="15" fill="rgb(230,137,11)" fg:x="74830" fg:w="38"/><text x="79.9378%" y="239.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (38 samples, 0.04%)</title><rect x="79.6878%" y="213" width="0.0405%" height="15" fill="rgb(212,28,1)" fg:x="74830" fg:w="38"/><text x="79.9378%" y="223.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (38 samples, 0.04%)</title><rect x="79.6878%" y="197" width="0.0405%" height="15" fill="rgb(248,164,17)" fg:x="74830" fg:w="38"/><text x="79.9378%" y="207.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (38 samples, 0.04%)</title><rect x="79.6878%" y="181" width="0.0405%" height="15" fill="rgb(222,171,42)" fg:x="74830" fg:w="38"/><text x="79.9378%" y="191.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::deallocate (38 samples, 0.04%)</title><rect x="79.6878%" y="165" width="0.0405%" height="15" fill="rgb(243,84,45)" fg:x="74830" fg:w="38"/><text x="79.9378%" y="175.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt;::deallocate (38 samples, 0.04%)</title><rect x="79.6878%" y="149" width="0.0405%" height="15" fill="rgb(252,49,23)" fg:x="74830" fg:w="38"/><text x="79.9378%" y="159.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt;::deallocate (38 samples, 0.04%)</title><rect x="79.6878%" y="133" width="0.0405%" height="15" fill="rgb(215,19,7)" fg:x="74830" fg:w="38"/><text x="79.9378%" y="143.50"></text></g><g><title>cfree (105 samples, 0.11%)</title><rect x="79.9412%" y="325" width="0.1118%" height="15" fill="rgb(238,81,41)" fg:x="75068" fg:w="105"/><text x="80.1912%" y="335.50"></text></g><g><title>[libc.so.6] (87 samples, 0.09%)</title><rect x="79.9604%" y="309" width="0.0926%" height="15" fill="rgb(210,199,37)" fg:x="75086" fg:w="87"/><text x="80.2104%" y="319.50"></text></g><g><title>cfree (117 samples, 0.12%)</title><rect x="80.0552%" y="117" width="0.1246%" height="15" fill="rgb(244,192,49)" fg:x="75175" fg:w="117"/><text x="80.3052%" y="127.50"></text></g><g><title>[libc.so.6] (102 samples, 0.11%)</title><rect x="80.0711%" y="101" width="0.1086%" height="15" fill="rgb(226,211,11)" fg:x="75190" fg:w="102"/><text x="80.3211%" y="111.50"></text></g><g><title>[libc.so.6] (35 samples, 0.04%)</title><rect x="80.1425%" y="85" width="0.0373%" height="15" fill="rgb(236,162,54)" fg:x="75257" fg:w="35"/><text x="80.3925%" y="95.50"></text></g><g><title>[libc.so.6] (34 samples, 0.04%)</title><rect x="80.1436%" y="69" width="0.0362%" height="15" fill="rgb(220,229,9)" fg:x="75258" fg:w="34"/><text x="80.3936%" y="79.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (120 samples, 0.13%)</title><rect x="80.0530%" y="213" width="0.1278%" height="15" fill="rgb(250,87,22)" fg:x="75173" fg:w="120"/><text x="80.3030%" y="223.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (120 samples, 0.13%)</title><rect x="80.0530%" y="197" width="0.1278%" height="15" fill="rgb(239,43,17)" fg:x="75173" fg:w="120"/><text x="80.3030%" y="207.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (118 samples, 0.13%)</title><rect x="80.0552%" y="181" width="0.1257%" height="15" fill="rgb(231,177,25)" fg:x="75175" fg:w="118"/><text x="80.3052%" y="191.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (118 samples, 0.13%)</title><rect x="80.0552%" y="165" width="0.1257%" height="15" fill="rgb(219,179,1)" fg:x="75175" fg:w="118"/><text x="80.3052%" y="175.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (118 samples, 0.13%)</title><rect x="80.0552%" y="149" width="0.1257%" height="15" fill="rgb(238,219,53)" fg:x="75175" fg:w="118"/><text x="80.3052%" y="159.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (118 samples, 0.13%)</title><rect x="80.0552%" y="133" width="0.1257%" height="15" fill="rgb(232,167,36)" fg:x="75175" fg:w="118"/><text x="80.3052%" y="143.50"></text></g><g><title>cfree (514 samples, 0.55%)</title><rect x="80.2170%" y="101" width="0.5474%" height="15" fill="rgb(244,19,51)" fg:x="75327" fg:w="514"/><text x="80.4670%" y="111.50"></text></g><g><title>[libc.so.6] (364 samples, 0.39%)</title><rect x="80.3768%" y="85" width="0.3876%" height="15" fill="rgb(224,6,22)" fg:x="75477" fg:w="364"/><text x="80.6268%" y="95.50"></text></g><g><title>std::_Function_handler&lt;void (wolf::WordTrieNode*), wolf::WordTrie::clear()::$_0&gt;::_M_invoke (711 samples, 0.76%)</title><rect x="80.0530%" y="325" width="0.7572%" height="15" fill="rgb(224,145,5)" fg:x="75173" fg:w="711"/><text x="80.3030%" y="335.50"></text></g><g><title>std::enable_if&lt;is_invocable_r_v&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt;, void&gt;::type std::__invoke_r&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt; (711 samples, 0.76%)</title><rect x="80.0530%" y="309" width="0.7572%" height="15" fill="rgb(234,130,49)" fg:x="75173" fg:w="711"/><text x="80.3030%" y="319.50"></text></g><g><title>void std::__invoke_impl&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt; (711 samples, 0.76%)</title><rect x="80.0530%" y="293" width="0.7572%" height="15" fill="rgb(254,6,2)" fg:x="75173" fg:w="711"/><text x="80.3030%" y="303.50"></text></g><g><title>wolf::WordTrie::clear (711 samples, 0.76%)</title><rect x="80.0530%" y="277" width="0.7572%" height="15" fill="rgb(208,96,46)" fg:x="75173" fg:w="711"/><text x="80.3030%" y="287.50"></text></g><g><title>wolf::WordTrieNode::~WordTrieNode (711 samples, 0.76%)</title><rect x="80.0530%" y="261" width="0.7572%" height="15" fill="rgb(239,3,39)" fg:x="75173" fg:w="711"/><text x="80.3030%" y="271.50"></text></g><g><title>std::unordered_map&lt;char, wolf::WordTrieNode*, std::hash&lt;char&gt;, std::equal_to&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt; &gt;::~unordered_map (711 samples, 0.76%)</title><rect x="80.0530%" y="245" width="0.7572%" height="15" fill="rgb(233,210,1)" fg:x="75173" fg:w="711"/><text x="80.3030%" y="255.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (711 samples, 0.76%)</title><rect x="80.0530%" y="229" width="0.7572%" height="15" fill="rgb(244,137,37)" fg:x="75173" fg:w="711"/><text x="80.3030%" y="239.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (591 samples, 0.63%)</title><rect x="80.1808%" y="213" width="0.6294%" height="15" fill="rgb(240,136,2)" fg:x="75293" fg:w="591"/><text x="80.4308%" y="223.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (581 samples, 0.62%)</title><rect x="80.1915%" y="197" width="0.6187%" height="15" fill="rgb(239,18,37)" fg:x="75303" fg:w="581"/><text x="80.4415%" y="207.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (580 samples, 0.62%)</title><rect x="80.1925%" y="181" width="0.6177%" height="15" fill="rgb(218,185,22)" fg:x="75304" fg:w="580"/><text x="80.4425%" y="191.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (580 samples, 0.62%)</title><rect x="80.1925%" y="165" width="0.6177%" height="15" fill="rgb(225,218,4)" fg:x="75304" fg:w="580"/><text x="80.4425%" y="175.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::deallocate (580 samples, 0.62%)</title><rect x="80.1925%" y="149" width="0.6177%" height="15" fill="rgb(230,182,32)" fg:x="75304" fg:w="580"/><text x="80.4425%" y="159.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt;::deallocate (580 samples, 0.62%)</title><rect x="80.1925%" y="133" width="0.6177%" height="15" fill="rgb(242,56,43)" fg:x="75304" fg:w="580"/><text x="80.4425%" y="143.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt;::deallocate (580 samples, 0.62%)</title><rect x="80.1925%" y="117" width="0.6177%" height="15" fill="rgb(233,99,24)" fg:x="75304" fg:w="580"/><text x="80.4425%" y="127.50"></text></g><g><title>operator delete (43 samples, 0.05%)</title><rect x="80.7644%" y="101" width="0.0458%" height="15" fill="rgb(234,209,42)" fg:x="75841" fg:w="43"/><text x="81.0144%" y="111.50"></text></g><g><title>std::_Function_handler&lt;void (wolf::WordTrieNode*), wolf::WordTrie::clear()::$_0&gt;::_M_manager (18 samples, 0.02%)</title><rect x="80.8102%" y="325" width="0.0192%" height="15" fill="rgb(227,7,12)" fg:x="75884" fg:w="18"/><text x="81.0602%" y="335.50"></text></g><g><title>std::function&lt;void (wolf::WordTrieNode*)&gt;::function (10 samples, 0.01%)</title><rect x="80.8294%" y="325" width="0.0106%" height="15" fill="rgb(245,203,43)" fg:x="75902" fg:w="10"/><text x="81.0794%" y="335.50"></text></g><g><title>cfree (1,617 samples, 1.72%)</title><rect x="84.3021%" y="309" width="1.7220%" height="15" fill="rgb(238,205,33)" fg:x="79163" fg:w="1617"/><text x="84.5521%" y="319.50"></text></g><g><title>[libc.so.6] (1,261 samples, 1.34%)</title><rect x="84.6812%" y="293" width="1.3429%" height="15" fill="rgb(231,56,7)" fg:x="79519" fg:w="1261"/><text x="84.9312%" y="303.50"></text></g><g><title>cfree (855 samples, 0.91%)</title><rect x="86.4734%" y="101" width="0.9105%" height="15" fill="rgb(244,186,29)" fg:x="81202" fg:w="855"/><text x="86.7234%" y="111.50"></text></g><g><title>[libc.so.6] (701 samples, 0.75%)</title><rect x="86.6374%" y="85" width="0.7465%" height="15" fill="rgb(234,111,31)" fg:x="81356" fg:w="701"/><text x="86.8874%" y="95.50"></text></g><g><title>[libc.so.6] (165 samples, 0.18%)</title><rect x="87.2082%" y="69" width="0.1757%" height="15" fill="rgb(241,149,10)" fg:x="81892" fg:w="165"/><text x="87.4582%" y="79.50"></text></g><g><title>[libc.so.6] (164 samples, 0.17%)</title><rect x="87.2093%" y="53" width="0.1746%" height="15" fill="rgb(249,206,44)" fg:x="81893" fg:w="164"/><text x="87.4593%" y="63.50"></text></g><g><title>[libc.so.6] (49 samples, 0.05%)</title><rect x="87.3317%" y="37" width="0.0522%" height="15" fill="rgb(251,153,30)" fg:x="82008" fg:w="49"/><text x="87.5817%" y="47.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (884 samples, 0.94%)</title><rect x="86.4692%" y="197" width="0.9414%" height="15" fill="rgb(239,152,38)" fg:x="81198" fg:w="884"/><text x="86.7192%" y="207.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (880 samples, 0.94%)</title><rect x="86.4734%" y="181" width="0.9371%" height="15" fill="rgb(249,139,47)" fg:x="81202" fg:w="880"/><text x="86.7234%" y="191.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (880 samples, 0.94%)</title><rect x="86.4734%" y="165" width="0.9371%" height="15" fill="rgb(244,64,35)" fg:x="81202" fg:w="880"/><text x="86.7234%" y="175.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (880 samples, 0.94%)</title><rect x="86.4734%" y="149" width="0.9371%" height="15" fill="rgb(216,46,15)" fg:x="81202" fg:w="880"/><text x="86.7234%" y="159.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (880 samples, 0.94%)</title><rect x="86.4734%" y="133" width="0.9371%" height="15" fill="rgb(250,74,19)" fg:x="81202" fg:w="880"/><text x="86.7234%" y="143.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (880 samples, 0.94%)</title><rect x="86.4734%" y="117" width="0.9371%" height="15" fill="rgb(249,42,33)" fg:x="81202" fg:w="880"/><text x="86.7234%" y="127.50"></text></g><g><title>operator delete (25 samples, 0.03%)</title><rect x="87.3839%" y="101" width="0.0266%" height="15" fill="rgb(242,149,17)" fg:x="82057" fg:w="25"/><text x="87.6339%" y="111.50"></text></g><g><title>[libc.so.6] (74 samples, 0.08%)</title><rect x="87.4734%" y="181" width="0.0788%" height="15" fill="rgb(244,29,21)" fg:x="82141" fg:w="74"/><text x="87.7234%" y="191.50"></text></g><g><title>cfree (1,967 samples, 2.09%)</title><rect x="87.6097%" y="85" width="2.0947%" height="15" fill="rgb(220,130,37)" fg:x="82269" fg:w="1967"/><text x="87.8597%" y="95.50">c..</text></g><g><title>[libc.so.6] (1,181 samples, 1.26%)</title><rect x="88.4467%" y="69" width="1.2577%" height="15" fill="rgb(211,67,2)" fg:x="83055" fg:w="1181"/><text x="88.6967%" y="79.50"></text></g><g><title>std::_Function_handler&lt;void (wolf::WordTrieNode*), wolf::WordTrie::clear()::$_0&gt;::_M_invoke (3,800 samples, 4.05%)</title><rect x="86.0262%" y="309" width="4.0467%" height="15" fill="rgb(235,68,52)" fg:x="80782" fg:w="3800"/><text x="86.2762%" y="319.50">std:..</text></g><g><title>std::enable_if&lt;is_invocable_r_v&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt;, void&gt;::type std::__invoke_r&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt; (3,398 samples, 3.62%)</title><rect x="86.4543%" y="293" width="3.6186%" height="15" fill="rgb(246,142,3)" fg:x="81184" fg:w="3398"/><text x="86.7043%" y="303.50">std:..</text></g><g><title>void std::__invoke_impl&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt; (3,398 samples, 3.62%)</title><rect x="86.4543%" y="277" width="3.6186%" height="15" fill="rgb(241,25,7)" fg:x="81184" fg:w="3398"/><text x="86.7043%" y="287.50">void..</text></g><g><title>wolf::WordTrie::clear (3,398 samples, 3.62%)</title><rect x="86.4543%" y="261" width="3.6186%" height="15" fill="rgb(242,119,39)" fg:x="81184" fg:w="3398"/><text x="86.7043%" y="271.50">wolf..</text></g><g><title>wolf::WordTrieNode::~WordTrieNode (3,384 samples, 3.60%)</title><rect x="86.4692%" y="245" width="3.6037%" height="15" fill="rgb(241,98,45)" fg:x="81198" fg:w="3384"/><text x="86.7192%" y="255.50">wolf..</text></g><g><title>std::unordered_map&lt;char, wolf::WordTrieNode*, std::hash&lt;char&gt;, std::equal_to&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt; &gt;::~unordered_map (3,384 samples, 3.60%)</title><rect x="86.4692%" y="229" width="3.6037%" height="15" fill="rgb(254,28,30)" fg:x="81198" fg:w="3384"/><text x="86.7192%" y="239.50">std:..</text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (3,384 samples, 3.60%)</title><rect x="86.4692%" y="213" width="3.6037%" height="15" fill="rgb(241,142,54)" fg:x="81198" fg:w="3384"/><text x="86.7192%" y="223.50">std:..</text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (2,500 samples, 2.66%)</title><rect x="87.4105%" y="197" width="2.6623%" height="15" fill="rgb(222,85,15)" fg:x="82082" fg:w="2500"/><text x="87.6605%" y="207.50">st..</text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (2,367 samples, 2.52%)</title><rect x="87.5522%" y="181" width="2.5207%" height="15" fill="rgb(210,85,47)" fg:x="82215" fg:w="2367"/><text x="87.8022%" y="191.50">st..</text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (2,363 samples, 2.52%)</title><rect x="87.5564%" y="165" width="2.5164%" height="15" fill="rgb(224,206,25)" fg:x="82219" fg:w="2363"/><text x="87.8064%" y="175.50">st..</text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (2,363 samples, 2.52%)</title><rect x="87.5564%" y="149" width="2.5164%" height="15" fill="rgb(243,201,19)" fg:x="82219" fg:w="2363"/><text x="87.8064%" y="159.50">st..</text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::deallocate (2,363 samples, 2.52%)</title><rect x="87.5564%" y="133" width="2.5164%" height="15" fill="rgb(236,59,4)" fg:x="82219" fg:w="2363"/><text x="87.8064%" y="143.50">st..</text></g><g><title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt;::deallocate (2,363 samples, 2.52%)</title><rect x="87.5564%" y="117" width="2.5164%" height="15" fill="rgb(254,179,45)" fg:x="82219" fg:w="2363"/><text x="87.8064%" y="127.50">st..</text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt;::deallocate (2,363 samples, 2.52%)</title><rect x="87.5564%" y="101" width="2.5164%" height="15" fill="rgb(226,14,10)" fg:x="82219" fg:w="2363"/><text x="87.8064%" y="111.50">st..</text></g><g><title>operator delete (346 samples, 0.37%)</title><rect x="89.7044%" y="85" width="0.3685%" height="15" fill="rgb(244,27,41)" fg:x="84236" fg:w="346"/><text x="89.9544%" y="95.50"></text></g><g><title>std::_Function_handler&lt;void (wolf::WordTrieNode*), wolf::WordTrie::clear()::$_0&gt;::_M_manager (476 samples, 0.51%)</title><rect x="90.0728%" y="309" width="0.5069%" height="15" fill="rgb(235,35,32)" fg:x="84582" fg:w="476"/><text x="90.3228%" y="319.50"></text></g><g><title>std::_Function_base::_Function_base (1,628 samples, 1.73%)</title><rect x="90.5797%" y="293" width="1.7337%" height="15" fill="rgb(218,68,31)" fg:x="85058" fg:w="1628"/><text x="90.8297%" y="303.50"></text></g><g><title>std::function&lt;void (wolf::WordTrieNode*)&gt;::function (1,630 samples, 1.74%)</title><rect x="90.5797%" y="309" width="1.7358%" height="15" fill="rgb(207,120,37)" fg:x="85058" fg:w="1630"/><text x="90.8297%" y="319.50"></text></g><g><title>std::function&lt;void (wolf::WordTrieNode*)&gt;::operator (170 samples, 0.18%)</title><rect x="92.3156%" y="309" width="0.1810%" height="15" fill="rgb(227,98,0)" fg:x="86688" fg:w="170"/><text x="92.5656%" y="319.50"></text></g><g><title>std::_Function_base::_M_empty (170 samples, 0.18%)</title><rect x="92.3156%" y="293" width="0.1810%" height="15" fill="rgb(207,7,3)" fg:x="86688" fg:w="170"/><text x="92.5656%" y="303.50"></text></g><g><title>cfree (3,923 samples, 4.18%)</title><rect x="94.8980%" y="293" width="4.1777%" height="15" fill="rgb(206,98,19)" fg:x="89113" fg:w="3923"/><text x="95.1480%" y="303.50">cfree</text></g><g><title>[libc.so.6] (3,500 samples, 3.73%)</title><rect x="95.3484%" y="277" width="3.7272%" height="15" fill="rgb(217,5,26)" fg:x="89536" fg:w="3500"/><text x="95.5984%" y="287.50">[lib..</text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (35 samples, 0.04%)</title><rect x="99.2354%" y="181" width="0.0373%" height="15" fill="rgb(235,190,38)" fg:x="93186" fg:w="35"/><text x="99.4854%" y="191.50"></text></g><g><title>[libc.so.6] (195 samples, 0.21%)</title><rect x="99.4729%" y="165" width="0.2077%" height="15" fill="rgb(247,86,24)" fg:x="93409" fg:w="195"/><text x="99.7229%" y="175.50"></text></g><g><title>std::_Function_handler&lt;void (wolf::WordTrieNode*), wolf::WordTrie::clear()::$_0&gt;::_M_invoke (568 samples, 0.60%)</title><rect x="99.0788%" y="293" width="0.6049%" height="15" fill="rgb(205,101,16)" fg:x="93039" fg:w="568"/><text x="99.3288%" y="303.50"></text></g><g><title>std::enable_if&lt;is_invocable_r_v&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt;, void&gt;::type std::__invoke_r&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt; (466 samples, 0.50%)</title><rect x="99.1875%" y="277" width="0.4963%" height="15" fill="rgb(246,168,33)" fg:x="93141" fg:w="466"/><text x="99.4375%" y="287.50"></text></g><g><title>void std::__invoke_impl&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt; (466 samples, 0.50%)</title><rect x="99.1875%" y="261" width="0.4963%" height="15" fill="rgb(231,114,1)" fg:x="93141" fg:w="466"/><text x="99.4375%" y="271.50"></text></g><g><title>wolf::WordTrie::clear (466 samples, 0.50%)</title><rect x="99.1875%" y="245" width="0.4963%" height="15" fill="rgb(207,184,53)" fg:x="93141" fg:w="466"/><text x="99.4375%" y="255.50"></text></g><g><title>wolf::WordTrieNode::~WordTrieNode (421 samples, 0.45%)</title><rect x="99.2354%" y="229" width="0.4483%" height="15" fill="rgb(224,95,51)" fg:x="93186" fg:w="421"/><text x="99.4854%" y="239.50"></text></g><g><title>std::unordered_map&lt;char, wolf::WordTrieNode*, std::hash&lt;char&gt;, std::equal_to&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt; &gt;::~unordered_map (421 samples, 0.45%)</title><rect x="99.2354%" y="213" width="0.4483%" height="15" fill="rgb(212,188,45)" fg:x="93186" fg:w="421"/><text x="99.4854%" y="223.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (421 samples, 0.45%)</title><rect x="99.2354%" y="197" width="0.4483%" height="15" fill="rgb(223,154,38)" fg:x="93186" fg:w="421"/><text x="99.4854%" y="207.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (386 samples, 0.41%)</title><rect x="99.2727%" y="181" width="0.4111%" height="15" fill="rgb(251,22,52)" fg:x="93221" fg:w="386"/><text x="99.5227%" y="191.50"></text></g><g><title>std::vector&lt;wolf::WordTrie, std::allocator&lt;wolf::WordTrie&gt; &gt;::~vector (18,904 samples, 20.13%)</title><rect x="79.6729%" y="389" width="20.1312%" height="15" fill="rgb(229,209,22)" fg:x="74816" fg:w="18904"/><text x="79.9229%" y="399.50">std::vector&lt;wolf::WordTrie, std:..</text></g><g><title>wolf::WordTrie::traverse_nodes_postorder (18,904 samples, 20.13%)</title><rect x="79.6729%" y="373" width="20.1312%" height="15" fill="rgb(234,138,34)" fg:x="74816" fg:w="18904"/><text x="79.9229%" y="383.50">wolf::WordTrie::traverse_nodes_p..</text></g><g><title>wolf::WordTrie::traverse_nodes_postorder (18,903 samples, 20.13%)</title><rect x="79.6739%" y="357" width="20.1301%" height="15" fill="rgb(212,95,11)" fg:x="74817" fg:w="18903"/><text x="79.9239%" y="367.50">wolf::WordTrie::traverse_nodes_p..</text></g><g><title>wolf::WordTrie::traverse_nodes_postorder (18,851 samples, 20.07%)</title><rect x="79.7293%" y="341" width="20.0748%" height="15" fill="rgb(240,179,47)" fg:x="74869" fg:w="18851"/><text x="79.9793%" y="351.50">wolf::WordTrie::traverse_nodes_p..</text></g><g><title>wolf::WordTrie::traverse_nodes_postorder (17,805 samples, 18.96%)</title><rect x="80.8432%" y="325" width="18.9609%" height="15" fill="rgb(240,163,11)" fg:x="75915" fg:w="17805"/><text x="81.0932%" y="335.50">wolf::WordTrie::traverse_nodes..</text></g><g><title>wolf::WordTrie::traverse_nodes_postorder (6,862 samples, 7.31%)</title><rect x="92.4966%" y="309" width="7.3075%" height="15" fill="rgb(236,37,12)" fg:x="86858" fg:w="6862"/><text x="92.7466%" y="319.50">wolf::Word..</text></g><g><title>std::function&lt;void (wolf::WordTrieNode*)&gt;::operator (113 samples, 0.12%)</title><rect x="99.6837%" y="293" width="0.1203%" height="15" fill="rgb(232,164,16)" fg:x="93607" fg:w="113"/><text x="99.9337%" y="303.50"></text></g><g><title>std::_Function_base::_M_empty (113 samples, 0.12%)</title><rect x="99.6837%" y="277" width="0.1203%" height="15" fill="rgb(244,205,15)" fg:x="93607" fg:w="113"/><text x="99.9337%" y="287.50"></text></g><g><title>[libc.so.6] (33 samples, 0.04%)</title><rect x="99.9020%" y="309" width="0.0351%" height="15" fill="rgb(223,117,47)" fg:x="93812" fg:w="33"/><text x="100.1520%" y="319.50"></text></g><g><title>_dl_deallocate_tls (15 samples, 0.02%)</title><rect x="99.9212%" y="293" width="0.0160%" height="15" fill="rgb(244,107,35)" fg:x="93830" fg:w="15"/><text x="100.1712%" y="303.50"></text></g><g><title>cfree (10 samples, 0.01%)</title><rect x="99.9265%" y="277" width="0.0106%" height="15" fill="rgb(205,140,8)" fg:x="93835" fg:w="10"/><text x="100.1765%" y="287.50"></text></g><g><title>[libc.so.6] (89 samples, 0.09%)</title><rect x="99.8530%" y="325" width="0.0948%" height="15" fill="rgb(228,84,46)" fg:x="93766" fg:w="89"/><text x="100.1030%" y="335.50"></text></g><g><title>[unknown] (10 samples, 0.01%)</title><rect x="99.9372%" y="309" width="0.0106%" height="15" fill="rgb(254,188,9)" fg:x="93845" fg:w="10"/><text x="100.1872%" y="319.50"></text></g><g><title>[unknown] (12 samples, 0.01%)</title><rect x="99.9478%" y="325" width="0.0128%" height="15" fill="rgb(206,112,54)" fg:x="93855" fg:w="12"/><text x="100.1978%" y="335.50"></text></g><g><title>[libc.so.6] (140 samples, 0.15%)</title><rect x="99.8126%" y="341" width="0.1491%" height="15" fill="rgb(216,84,49)" fg:x="93728" fg:w="140"/><text x="100.0626%" y="351.50"></text></g><g><title>wolf::MultiTrieFilter::~MultiTrieFilter (19,065 samples, 20.30%)</title><rect x="79.6611%" y="405" width="20.3026%" height="15" fill="rgb(214,194,35)" fg:x="74805" fg:w="19065"/><text x="79.9111%" y="415.50">wolf::MultiTrieFilter::~MultiTri..</text></g><g><title>wolf::ThreadPool::~ThreadPool (150 samples, 0.16%)</title><rect x="99.8041%" y="389" width="0.1597%" height="15" fill="rgb(249,28,3)" fg:x="93720" fg:w="150"/><text x="100.0541%" y="399.50"></text></g><g><title>std::thread::join (143 samples, 0.15%)</title><rect x="99.8115%" y="373" width="0.1523%" height="15" fill="rgb(222,56,52)" fg:x="93727" fg:w="143"/><text x="100.0615%" y="383.50"></text></g><g><title>std::thread::join (142 samples, 0.15%)</title><rect x="99.8126%" y="357" width="0.1512%" height="15" fill="rgb(245,217,50)" fg:x="93728" fg:w="142"/><text x="100.0626%" y="367.50"></text></g><g><title>wolf::MultiTrieFilterSession::~MultiTrieFilterSession (17 samples, 0.02%)</title><rect x="99.9638%" y="405" width="0.0181%" height="15" fill="rgb(213,201,24)" fg:x="93870" fg:w="17"/><text x="100.2138%" y="415.50"></text></g><g><title>std::vector&lt;wolf::WordTrieSession, std::allocator&lt;wolf::WordTrieSession&gt; &gt;::~vector (17 samples, 0.02%)</title><rect x="99.9638%" y="389" width="0.0181%" height="15" fill="rgb(248,116,28)" fg:x="93870" fg:w="17"/><text x="100.2138%" y="399.50"></text></g><g><title>void std::_Destroy&lt;wolf::WordTrieSession*, wolf::WordTrieSession&gt; (17 samples, 0.02%)</title><rect x="99.9638%" y="373" width="0.0181%" height="15" fill="rgb(219,72,43)" fg:x="93870" fg:w="17"/><text x="100.2138%" y="383.50"></text></g><g><title>void std::_Destroy&lt;wolf::WordTrieSession*&gt; (17 samples, 0.02%)</title><rect x="99.9638%" y="357" width="0.0181%" height="15" fill="rgb(209,138,14)" fg:x="93870" fg:w="17"/><text x="100.2138%" y="367.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;wolf::WordTrieSession*&gt; (17 samples, 0.02%)</title><rect x="99.9638%" y="341" width="0.0181%" height="15" fill="rgb(222,18,33)" fg:x="93870" fg:w="17"/><text x="100.2138%" y="351.50"></text></g><g><title>void std::_Destroy&lt;wolf::WordTrieSession&gt; (17 samples, 0.02%)</title><rect x="99.9638%" y="325" width="0.0181%" height="15" fill="rgb(213,199,7)" fg:x="93870" fg:w="17"/><text x="100.2138%" y="335.50"></text></g><g><title>void std::destroy_at&lt;wolf::WordTrieSession&gt; (17 samples, 0.02%)</title><rect x="99.9638%" y="309" width="0.0181%" height="15" fill="rgb(250,110,10)" fg:x="93870" fg:w="17"/><text x="100.2138%" y="319.50"></text></g><g><title>wolf::WordTrieSession::~WordTrieSession (17 samples, 0.02%)</title><rect x="99.9638%" y="293" width="0.0181%" height="15" fill="rgb(248,123,6)" fg:x="93870" fg:w="17"/><text x="100.2138%" y="303.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::~vector (17 samples, 0.02%)</title><rect x="99.9638%" y="277" width="0.0181%" height="15" fill="rgb(206,91,31)" fg:x="93870" fg:w="17"/><text x="100.2138%" y="287.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::~_Vector_base (17 samples, 0.02%)</title><rect x="99.9638%" y="261" width="0.0181%" height="15" fill="rgb(211,154,13)" fg:x="93870" fg:w="17"/><text x="100.2138%" y="271.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::_M_deallocate (17 samples, 0.02%)</title><rect x="99.9638%" y="245" width="0.0181%" height="15" fill="rgb(225,148,7)" fg:x="93870" fg:w="17"/><text x="100.2138%" y="255.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::deallocate (17 samples, 0.02%)</title><rect x="99.9638%" y="229" width="0.0181%" height="15" fill="rgb(220,160,43)" fg:x="93870" fg:w="17"/><text x="100.2138%" y="239.50"></text></g><g><title>std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;::deallocate (17 samples, 0.02%)</title><rect x="99.9638%" y="213" width="0.0181%" height="15" fill="rgb(213,52,39)" fg:x="93870" fg:w="17"/><text x="100.2138%" y="223.50"></text></g><g><title>std::__new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;::deallocate (17 samples, 0.02%)</title><rect x="99.9638%" y="197" width="0.0181%" height="15" fill="rgb(243,137,7)" fg:x="93870" fg:w="17"/><text x="100.2138%" y="207.50"></text></g><g><title>cfree (17 samples, 0.02%)</title><rect x="99.9638%" y="181" width="0.0181%" height="15" fill="rgb(230,79,13)" fg:x="93870" fg:w="17"/><text x="100.2138%" y="191.50"></text></g><g><title>[libc.so.6] (17 samples, 0.02%)</title><rect x="99.9638%" y="165" width="0.0181%" height="15" fill="rgb(247,105,23)" fg:x="93870" fg:w="17"/><text x="100.2138%" y="175.50"></text></g><g><title>[libc.so.6] (16 samples, 0.02%)</title><rect x="99.9649%" y="149" width="0.0170%" height="15" fill="rgb(223,179,41)" fg:x="93871" fg:w="16"/><text x="100.2149%" y="159.50"></text></g><g><title>[libc.so.6] (16 samples, 0.02%)</title><rect x="99.9649%" y="133" width="0.0170%" height="15" fill="rgb(218,9,34)" fg:x="93871" fg:w="16"/><text x="100.2149%" y="143.50"></text></g><g><title>wolf::Bench::run (19,589 samples, 20.86%)</title><rect x="79.1255%" y="501" width="20.8607%" height="15" fill="rgb(222,106,8)" fg:x="74302" fg:w="19589"/><text x="79.3755%" y="511.50">wolf::Bench::run</text></g><g><title>wolf::Bench::run_any (19,589 samples, 20.86%)</title><rect x="79.1255%" y="485" width="20.8607%" height="15" fill="rgb(211,220,0)" fg:x="74302" fg:w="19589"/><text x="79.3755%" y="495.50">wolf::Bench::run_any</text></g><g><title>std::_Function_handler&lt;wolf::BenchResult (std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long), wolf::BenchResult (*)(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long)&gt;::_M_invoke (19,588 samples, 20.86%)</title><rect x="79.1266%" y="469" width="20.8596%" height="15" fill="rgb(229,52,16)" fg:x="74303" fg:w="19588"/><text x="79.3766%" y="479.50">std::_Function_handler&lt;wolf::Benc..</text></g><g><title>std::enable_if&lt;is_invocable_r_v&lt;wolf::BenchResult, wolf::BenchResult (*&amp;)(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long), std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long&gt;, wolf::BenchResult&gt;::type std::__invoke_r&lt;wolf::BenchResult, wolf::BenchResult (*&amp;)(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long), std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long&gt; (19,588 samples, 20.86%)</title><rect x="79.1266%" y="453" width="20.8596%" height="15" fill="rgb(212,155,18)" fg:x="74303" fg:w="19588"/><text x="79.3766%" y="463.50">std::enable_if&lt;is_invocable_r_v&lt;w..</text></g><g><title>wolf::BenchResult std::__invoke_impl&lt;wolf::BenchResult, wolf::BenchResult (*&amp;)(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long), std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long&gt; (19,588 samples, 20.86%)</title><rect x="79.1266%" y="437" width="20.8596%" height="15" fill="rgb(242,21,14)" fg:x="74303" fg:w="19588"/><text x="79.3766%" y="447.50">wolf::BenchResult std::__invoke_i..</text></g><g><title>wolf::Bench::run_trie_filter (19,588 samples, 20.86%)</title><rect x="79.1266%" y="421" width="20.8596%" height="15" fill="rgb(222,19,48)" fg:x="74303" fg:w="19588"/><text x="79.3766%" y="431.50">wolf::Bench::run_trie_filter</text></g><g><title>all (93,904 samples, 100%)</title><rect x="0.0000%" y="613" width="100.0000%" height="15" fill="rgb(232,45,27)" fg:x="0" fg:w="93904"/><text x="0.2500%" y="623.50"></text></g><g><title>wolf (93,904 samples, 100.00%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(249,103,42)" fg:x="0" fg:w="93904"/><text x="0.2500%" y="607.50">wolf</text></g><g><title>_start (19,606 samples, 20.88%)</title><rect x="79.1212%" y="581" width="20.8788%" height="15" fill="rgb(246,81,33)" fg:x="74298" fg:w="19606"/><text x="79.3712%" y="591.50">_start</text></g><g><title>__libc_start_main (19,606 samples, 20.88%)</title><rect x="79.1212%" y="565" width="20.8788%" height="15" fill="rgb(252,33,42)" fg:x="74298" fg:w="19606"/><text x="79.3712%" y="575.50">__libc_start_main</text></g><g><title>[libc.so.6] (19,606 samples, 20.88%)</title><rect x="79.1212%" y="549" width="20.8788%" height="15" fill="rgb(209,212,41)" fg:x="74298" fg:w="19606"/><text x="79.3712%" y="559.50">[libc.so.6]</text></g><g><title>main (19,606 samples, 20.88%)</title><rect x="79.1212%" y="533" width="20.8788%" height="15" fill="rgb(207,154,6)" fg:x="74298" fg:w="19606"/><text x="79.3712%" y="543.50">main</text></g><g><title>run_benchmark (19,606 samples, 20.88%)</title><rect x="79.1212%" y="517" width="20.8788%" height="15" fill="rgb(223,64,47)" fg:x="74298" fg:w="19606"/><text x="79.3712%" y="527.50">run_benchmark</text></g><g><title>wolf::FileReader::read_lines[abi:cxx11] (13 samples, 0.01%)</title><rect x="99.9862%" y="501" width="0.0138%" height="15" fill="rgb(211,161,38)" fg:x="93891" fg:w="13"/><text x="100.2362%" y="511.50"></text></g></svg></svg>