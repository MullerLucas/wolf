<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="710" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="693.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="693.00"> </text><svg id="frames" x="10" width="1180" total_samples="8770"><g><title>[[heap]] (52 samples, 0.59%)</title><rect x="0.0000%" y="629" width="0.5929%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="52"/><text x="0.2500%" y="639.50"></text></g><g><title>[libc.so.6] (52 samples, 0.59%)</title><rect x="0.0000%" y="613" width="0.5929%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="52"/><text x="0.2500%" y="623.50"></text></g><g><title>[unknown] (4 samples, 0.05%)</title><rect x="0.5473%" y="597" width="0.0456%" height="15" fill="rgb(221,193,54)" fg:x="48" fg:w="4"/><text x="0.7973%" y="607.50"></text></g><g><title>[libc.so.6] (3 samples, 0.03%)</title><rect x="0.5929%" y="597" width="0.0342%" height="15" fill="rgb(248,212,6)" fg:x="52" fg:w="3"/><text x="0.8429%" y="607.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="0.5929%" y="581" width="0.0342%" height="15" fill="rgb(208,68,35)" fg:x="52" fg:w="3"/><text x="0.8429%" y="591.50"></text></g><g><title>[[stack]] (5 samples, 0.06%)</title><rect x="0.5929%" y="629" width="0.0570%" height="15" fill="rgb(232,128,0)" fg:x="52" fg:w="5"/><text x="0.8429%" y="639.50"></text></g><g><title>pthread_cond_wait (5 samples, 0.06%)</title><rect x="0.5929%" y="613" width="0.0570%" height="15" fill="rgb(207,160,47)" fg:x="52" fg:w="5"/><text x="0.8429%" y="623.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.6271%" y="597" width="0.0228%" height="15" fill="rgb(228,23,34)" fg:x="55" fg:w="2"/><text x="0.8771%" y="607.50"></text></g><g><title>[anon] (1 samples, 0.01%)</title><rect x="0.6499%" y="629" width="0.0114%" height="15" fill="rgb(218,30,26)" fg:x="57" fg:w="1"/><text x="0.8999%" y="639.50"></text></g><g><title>cfree (1 samples, 0.01%)</title><rect x="0.6499%" y="613" width="0.0114%" height="15" fill="rgb(220,122,19)" fg:x="57" fg:w="1"/><text x="0.8999%" y="623.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="0.6499%" y="597" width="0.0114%" height="15" fill="rgb(250,228,42)" fg:x="57" fg:w="1"/><text x="0.8999%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.6499%" y="581" width="0.0114%" height="15" fill="rgb(240,193,28)" fg:x="57" fg:w="1"/><text x="0.8999%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.6499%" y="565" width="0.0114%" height="15" fill="rgb(216,20,37)" fg:x="57" fg:w="1"/><text x="0.8999%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.6956%" y="549" width="0.0114%" height="15" fill="rgb(206,188,39)" fg:x="61" fg:w="1"/><text x="0.9456%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="0.6956%" y="533" width="0.0114%" height="15" fill="rgb(217,207,13)" fg:x="61" fg:w="1"/><text x="0.9456%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="0.6956%" y="597" width="0.0228%" height="15" fill="rgb(231,73,38)" fg:x="61" fg:w="2"/><text x="0.9456%" y="607.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="0.6956%" y="581" width="0.0228%" height="15" fill="rgb(225,20,46)" fg:x="61" fg:w="2"/><text x="0.9456%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.02%)</title><rect x="0.6956%" y="565" width="0.0228%" height="15" fill="rgb(210,31,41)" fg:x="61" fg:w="2"/><text x="0.9456%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.7070%" y="549" width="0.0114%" height="15" fill="rgb(221,200,47)" fg:x="62" fg:w="1"/><text x="0.9570%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.7070%" y="533" width="0.0114%" height="15" fill="rgb(226,26,5)" fg:x="62" fg:w="1"/><text x="0.9570%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (5 samples, 0.06%)</title><rect x="0.6727%" y="613" width="0.0570%" height="15" fill="rgb(249,33,26)" fg:x="59" fg:w="5"/><text x="0.9227%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.7184%" y="597" width="0.0114%" height="15" fill="rgb(235,183,28)" fg:x="63" fg:w="1"/><text x="0.9684%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="0.7184%" y="581" width="0.0114%" height="15" fill="rgb(221,5,38)" fg:x="63" fg:w="1"/><text x="0.9684%" y="591.50"></text></g><g><title>[ld-linux-x86-64.so.2] (8 samples, 0.09%)</title><rect x="0.6613%" y="629" width="0.0912%" height="15" fill="rgb(247,18,42)" fg:x="58" fg:w="8"/><text x="0.9113%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="0.7298%" y="613" width="0.0228%" height="15" fill="rgb(241,131,45)" fg:x="64" fg:w="2"/><text x="0.9798%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="3.1243%" y="581" width="0.0114%" height="15" fill="rgb(249,31,29)" fg:x="274" fg:w="1"/><text x="3.3743%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="3.1243%" y="565" width="0.0114%" height="15" fill="rgb(225,111,53)" fg:x="274" fg:w="1"/><text x="3.3743%" y="575.50"></text></g><g><title>[libc.so.6] (22 samples, 0.25%)</title><rect x="2.9076%" y="597" width="0.2509%" height="15" fill="rgb(238,160,17)" fg:x="255" fg:w="22"/><text x="3.1576%" y="607.50"></text></g><g><title>cfree (2 samples, 0.02%)</title><rect x="3.1357%" y="581" width="0.0228%" height="15" fill="rgb(214,148,48)" fg:x="275" fg:w="2"/><text x="3.3857%" y="591.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="3.1471%" y="565" width="0.0114%" height="15" fill="rgb(232,36,49)" fg:x="276" fg:w="1"/><text x="3.3971%" y="575.50"></text></g><g><title>[unknown] (168 samples, 1.92%)</title><rect x="3.1585%" y="597" width="1.9156%" height="15" fill="rgb(209,103,24)" fg:x="277" fg:w="168"/><text x="3.4085%" y="607.50">[..</text></g><g><title>[unknown] (83 samples, 0.95%)</title><rect x="4.1277%" y="581" width="0.9464%" height="15" fill="rgb(229,88,8)" fg:x="362" fg:w="83"/><text x="4.3777%" y="591.50"></text></g><g><title>[unknown] (26 samples, 0.30%)</title><rect x="4.7777%" y="565" width="0.2965%" height="15" fill="rgb(213,181,19)" fg:x="419" fg:w="26"/><text x="5.0277%" y="575.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="5.0513%" y="549" width="0.0228%" height="15" fill="rgb(254,191,54)" fg:x="443" fg:w="2"/><text x="5.3013%" y="559.50"></text></g><g><title>__ctype_init (182 samples, 2.08%)</title><rect x="5.0741%" y="597" width="2.0753%" height="15" fill="rgb(241,83,37)" fg:x="445" fg:w="182"/><text x="5.3241%" y="607.50">_..</text></g><g><title>[unknown] (38 samples, 0.43%)</title><rect x="6.7161%" y="581" width="0.4333%" height="15" fill="rgb(233,36,39)" fg:x="589" fg:w="38"/><text x="6.9661%" y="591.50"></text></g><g><title>__sigsetjmp (12 samples, 0.14%)</title><rect x="7.1494%" y="597" width="0.1368%" height="15" fill="rgb(226,3,54)" fg:x="627" fg:w="12"/><text x="7.3994%" y="607.50"></text></g><g><title>_setjmp (2 samples, 0.02%)</title><rect x="7.2862%" y="597" width="0.0228%" height="15" fill="rgb(245,192,40)" fg:x="639" fg:w="2"/><text x="7.5362%" y="607.50"></text></g><g><title>std::thread::_State_impl&lt;std::thread::_Invoker&lt;std::tuple&lt;wolf::ThreadPool::ThreadPool(unsigned long)::{lambda()#1}&gt; &gt; &gt;::_M_run (1 samples, 0.01%)</title><rect x="7.3660%" y="581" width="0.0114%" height="15" fill="rgb(238,167,29)" fg:x="646" fg:w="1"/><text x="7.6160%" y="591.50"></text></g><g><title>std::_Function_base::_Base_manager&lt;wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt;::_M_get_pointer (1 samples, 0.01%)</title><rect x="7.4914%" y="549" width="0.0114%" height="15" fill="rgb(232,182,51)" fg:x="657" fg:w="1"/><text x="7.7414%" y="559.50"></text></g><g><title>std::_Function_handler&lt;void (), wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&gt;::_M_invoke (13 samples, 0.15%)</title><rect x="7.4914%" y="565" width="0.1482%" height="15" fill="rgb(231,60,39)" fg:x="657" fg:w="13"/><text x="7.7414%" y="575.50"></text></g><g><title>std::enable_if&lt;is_invocable_r_v&lt;void, wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&amp;&gt;, void&gt;::type std::__invoke_r&lt;void, wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&amp;&gt; (12 samples, 0.14%)</title><rect x="7.5029%" y="549" width="0.1368%" height="15" fill="rgb(208,69,12)" fg:x="658" fg:w="12"/><text x="7.7529%" y="559.50"></text></g><g><title>void std::__invoke_impl&lt;void, wolf::ThreadPool::enqueue(std::function&lt;void ()&gt;)::{lambda()#1}&amp;&gt; (12 samples, 0.14%)</title><rect x="7.5029%" y="533" width="0.1368%" height="15" fill="rgb(235,93,37)" fg:x="658" fg:w="12"/><text x="7.7529%" y="543.50"></text></g><g><title>wolf::ThreadPool::enqueue (12 samples, 0.14%)</title><rect x="7.5029%" y="517" width="0.1368%" height="15" fill="rgb(213,116,39)" fg:x="658" fg:w="12"/><text x="7.7529%" y="527.50"></text></g><g><title>std::packaged_task&lt;void ()&gt;::operator (12 samples, 0.14%)</title><rect x="7.5029%" y="501" width="0.1368%" height="15" fill="rgb(222,207,29)" fg:x="658" fg:w="12"/><text x="7.7529%" y="511.50"></text></g><g><title>void std::__future_base::_State_baseV2::_S_check&lt;std::__future_base::_Task_state_base&lt;void ()&gt; &gt; (8 samples, 0.09%)</title><rect x="7.5485%" y="485" width="0.0912%" height="15" fill="rgb(206,96,30)" fg:x="662" fg:w="8"/><text x="7.7985%" y="495.50"></text></g><g><title>std::__shared_ptr&lt;std::__future_base::_Task_state_base&lt;void ()&gt;, (__gnu_cxx::_Lock_policy)2&gt;::operator bool (8 samples, 0.09%)</title><rect x="7.5485%" y="469" width="0.0912%" height="15" fill="rgb(218,138,4)" fg:x="662" fg:w="8"/><text x="7.7985%" y="479.50"></text></g><g><title>__once_proxy (2 samples, 0.02%)</title><rect x="7.6853%" y="485" width="0.0228%" height="15" fill="rgb(250,191,14)" fg:x="674" fg:w="2"/><text x="7.9353%" y="495.50"></text></g><g><title>__tls_get_addr (2 samples, 0.02%)</title><rect x="7.6853%" y="469" width="0.0228%" height="15" fill="rgb(239,60,40)" fg:x="674" fg:w="2"/><text x="7.9353%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="8.4949%" y="325" width="0.0114%" height="15" fill="rgb(206,27,48)" fg:x="745" fg:w="1"/><text x="8.7449%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="8.4949%" y="309" width="0.0114%" height="15" fill="rgb(225,35,8)" fg:x="745" fg:w="1"/><text x="8.7449%" y="319.50"></text></g><g><title>__gnu_cxx::__normal_iterator&lt;char const*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt;::operator++ (1 samples, 0.01%)</title><rect x="8.5063%" y="325" width="0.0114%" height="15" fill="rgb(250,213,24)" fg:x="746" fg:w="1"/><text x="8.7563%" y="335.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="25.8381%" y="261" width="0.0228%" height="15" fill="rgb(247,123,22)" fg:x="2266" fg:w="2"/><text x="26.0881%" y="271.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="25.8381%" y="245" width="0.0228%" height="15" fill="rgb(231,138,38)" fg:x="2266" fg:w="2"/><text x="26.0881%" y="255.50"></text></g><g><title>operator new (1,522 samples, 17.35%)</title><rect x="8.5177%" y="325" width="17.3546%" height="15" fill="rgb(231,145,46)" fg:x="747" fg:w="1522"/><text x="8.7677%" y="335.50">operator new</text></g><g><title>malloc (1,516 samples, 17.29%)</title><rect x="8.5861%" y="309" width="17.2862%" height="15" fill="rgb(251,118,11)" fg:x="753" fg:w="1516"/><text x="8.8361%" y="319.50">malloc</text></g><g><title>[libc.so.6] (1,295 samples, 14.77%)</title><rect x="11.1060%" y="293" width="14.7662%" height="15" fill="rgb(217,147,25)" fg:x="974" fg:w="1295"/><text x="11.3560%" y="303.50">[libc.so.6]</text></g><g><title>[libc.so.6] (122 samples, 1.39%)</title><rect x="24.4812%" y="277" width="1.3911%" height="15" fill="rgb(247,81,37)" fg:x="2147" fg:w="122"/><text x="24.7312%" y="287.50"></text></g><g><title>__mprotect (1 samples, 0.01%)</title><rect x="25.8609%" y="261" width="0.0114%" height="15" fill="rgb(209,12,38)" fg:x="2268" fg:w="1"/><text x="26.1109%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="25.8609%" y="245" width="0.0114%" height="15" fill="rgb(227,1,9)" fg:x="2268" fg:w="1"/><text x="26.1109%" y="255.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::end (7 samples, 0.08%)</title><rect x="25.8723%" y="325" width="0.0798%" height="15" fill="rgb(248,47,43)" fg:x="2269" fg:w="7"/><text x="26.1223%" y="335.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::size (7 samples, 0.08%)</title><rect x="25.8723%" y="309" width="0.0798%" height="15" fill="rgb(221,10,30)" fg:x="2269" fg:w="7"/><text x="26.1223%" y="319.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (1,011 samples, 11.53%)</title><rect x="31.0718%" y="293" width="11.5279%" height="15" fill="rgb(210,229,1)" fg:x="2725" fg:w="1011"/><text x="31.3218%" y="303.50">std::_Hashtable&lt;c..</text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (1,011 samples, 11.53%)</title><rect x="31.0718%" y="277" width="11.5279%" height="15" fill="rgb(222,148,37)" fg:x="2725" fg:w="1011"/><text x="31.3218%" y="287.50">std::_Hashtable&lt;c..</text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::begin (2 samples, 0.02%)</title><rect x="42.5998%" y="293" width="0.0228%" height="15" fill="rgb(234,67,33)" fg:x="3736" fg:w="2"/><text x="42.8498%" y="303.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_begin (2 samples, 0.02%)</title><rect x="42.5998%" y="277" width="0.0228%" height="15" fill="rgb(247,98,35)" fg:x="3736" fg:w="2"/><text x="42.8498%" y="287.50"></text></g><g><title>std::unordered_map&lt;char, wolf::WordTrieNode*, std::hash&lt;char&gt;, std::equal_to&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt; &gt;::find (1,463 samples, 16.68%)</title><rect x="25.9521%" y="325" width="16.6819%" height="15" fill="rgb(247,138,52)" fg:x="2276" fg:w="1463"/><text x="26.2021%" y="335.50">std::unordered_map&lt;char, w..</text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::find (1,463 samples, 16.68%)</title><rect x="25.9521%" y="309" width="16.6819%" height="15" fill="rgb(213,79,30)" fg:x="2276" fg:w="1463"/><text x="26.2021%" y="319.50">std::_Hashtable&lt;char, std:..</text></g><g><title>std::__detail::operator== (1 samples, 0.01%)</title><rect x="42.6226%" y="293" width="0.0114%" height="15" fill="rgb(246,177,23)" fg:x="3738" fg:w="1"/><text x="42.8726%" y="303.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (54 samples, 0.62%)</title><rect x="42.7024%" y="293" width="0.6157%" height="15" fill="rgb(230,62,27)" fg:x="3745" fg:w="54"/><text x="42.9524%" y="303.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (53 samples, 0.60%)</title><rect x="42.7138%" y="277" width="0.6043%" height="15" fill="rgb(216,154,8)" fg:x="3746" fg:w="53"/><text x="42.9638%" y="287.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (53 samples, 0.60%)</title><rect x="42.7138%" y="261" width="0.6043%" height="15" fill="rgb(244,35,45)" fg:x="3746" fg:w="53"/><text x="42.9638%" y="271.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_node (57 samples, 0.65%)</title><rect x="43.3181%" y="293" width="0.6499%" height="15" fill="rgb(251,115,12)" fg:x="3799" fg:w="57"/><text x="43.5681%" y="303.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_find_before_node (57 samples, 0.65%)</title><rect x="43.3181%" y="277" width="0.6499%" height="15" fill="rgb(240,54,50)" fg:x="3799" fg:w="57"/><text x="43.5681%" y="287.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (12 samples, 0.14%)</title><rect x="44.3444%" y="277" width="0.1368%" height="15" fill="rgb(233,84,52)" fg:x="3889" fg:w="12"/><text x="44.5944%" y="287.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (10 samples, 0.11%)</title><rect x="44.3672%" y="261" width="0.1140%" height="15" fill="rgb(207,117,47)" fg:x="3891" fg:w="10"/><text x="44.6172%" y="271.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (10 samples, 0.11%)</title><rect x="44.3672%" y="245" width="0.1140%" height="15" fill="rgb(249,43,39)" fg:x="3891" fg:w="10"/><text x="44.6172%" y="255.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_bucket_begin (169 samples, 1.93%)</title><rect x="44.4812%" y="277" width="1.9270%" height="15" fill="rgb(209,38,44)" fg:x="3901" fg:w="169"/><text x="44.7312%" y="287.50">s..</text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_bucket_index (119 samples, 1.36%)</title><rect x="45.0513%" y="261" width="1.3569%" height="15" fill="rgb(236,212,23)" fg:x="3951" fg:w="119"/><text x="45.3013%" y="271.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (119 samples, 1.36%)</title><rect x="45.0513%" y="245" width="1.3569%" height="15" fill="rgb(242,79,21)" fg:x="3951" fg:w="119"/><text x="45.3013%" y="255.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (119 samples, 1.36%)</title><rect x="45.0513%" y="229" width="1.3569%" height="15" fill="rgb(211,96,35)" fg:x="3951" fg:w="119"/><text x="45.3013%" y="239.50"></text></g><g><title>[libc.so.6] (6 samples, 0.07%)</title><rect x="46.6477%" y="261" width="0.0684%" height="15" fill="rgb(253,215,40)" fg:x="4091" fg:w="6"/><text x="46.8977%" y="271.50"></text></g><g><title>[libc.so.6] (78 samples, 0.89%)</title><rect x="52.9761%" y="197" width="0.8894%" height="15" fill="rgb(211,81,21)" fg:x="4646" fg:w="78"/><text x="53.2261%" y="207.50"></text></g><g><title>[libc.so.6] (591 samples, 6.74%)</title><rect x="47.1608%" y="229" width="6.7389%" height="15" fill="rgb(208,190,38)" fg:x="4136" fg:w="591"/><text x="47.4108%" y="239.50">[libc.so...</text></g><g><title>[libc.so.6] (280 samples, 3.19%)</title><rect x="50.7070%" y="213" width="3.1927%" height="15" fill="rgb(235,213,38)" fg:x="4447" fg:w="280"/><text x="50.9570%" y="223.50">[li..</text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="53.8655%" y="197" width="0.0342%" height="15" fill="rgb(237,122,38)" fg:x="4724" fg:w="3"/><text x="54.1155%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="53.8883%" y="181" width="0.0114%" height="15" fill="rgb(244,218,35)" fg:x="4726" fg:w="1"/><text x="54.1383%" y="191.50"></text></g><g><title>operator new (631 samples, 7.19%)</title><rect x="46.7161%" y="261" width="7.1950%" height="15" fill="rgb(240,68,47)" fg:x="4097" fg:w="631"/><text x="46.9661%" y="271.50">operator n..</text></g><g><title>malloc (629 samples, 7.17%)</title><rect x="46.7389%" y="245" width="7.1722%" height="15" fill="rgb(210,16,53)" fg:x="4099" fg:w="629"/><text x="46.9889%" y="255.50">malloc</text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="53.8997%" y="229" width="0.0114%" height="15" fill="rgb(235,124,12)" fg:x="4727" fg:w="1"/><text x="54.1497%" y="239.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_begin (1 samples, 0.01%)</title><rect x="53.9111%" y="261" width="0.0114%" height="15" fill="rgb(224,169,11)" fg:x="4728" fg:w="1"/><text x="54.1611%" y="271.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (6 samples, 0.07%)</title><rect x="53.9225%" y="261" width="0.0684%" height="15" fill="rgb(250,166,2)" fg:x="4729" fg:w="6"/><text x="54.1725%" y="271.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (6 samples, 0.07%)</title><rect x="53.9225%" y="245" width="0.0684%" height="15" fill="rgb(242,216,29)" fg:x="4729" fg:w="6"/><text x="54.1725%" y="255.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (6 samples, 0.07%)</title><rect x="53.9225%" y="229" width="0.0684%" height="15" fill="rgb(230,116,27)" fg:x="4729" fg:w="6"/><text x="54.1725%" y="239.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (6 samples, 0.07%)</title><rect x="53.9225%" y="213" width="0.0684%" height="15" fill="rgb(228,99,48)" fg:x="4729" fg:w="6"/><text x="54.1725%" y="223.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (6 samples, 0.07%)</title><rect x="53.9225%" y="197" width="0.0684%" height="15" fill="rgb(253,11,6)" fg:x="4729" fg:w="6"/><text x="54.1725%" y="207.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (6 samples, 0.07%)</title><rect x="53.9225%" y="181" width="0.0684%" height="15" fill="rgb(247,143,39)" fg:x="4729" fg:w="6"/><text x="54.1725%" y="191.50"></text></g><g><title>cfree (6 samples, 0.07%)</title><rect x="53.9225%" y="165" width="0.0684%" height="15" fill="rgb(236,97,10)" fg:x="4729" fg:w="6"/><text x="54.1725%" y="175.50"></text></g><g><title>[libc.so.6] (3 samples, 0.03%)</title><rect x="53.9567%" y="149" width="0.0342%" height="15" fill="rgb(233,208,19)" fg:x="4732" fg:w="3"/><text x="54.2067%" y="159.50"></text></g><g><title>std::__detail::_Hash_code_base&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (86 samples, 0.98%)</title><rect x="53.9909%" y="245" width="0.9806%" height="15" fill="rgb(216,164,2)" fg:x="4735" fg:w="86"/><text x="54.2409%" y="255.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_rehash_aux (762 samples, 8.69%)</title><rect x="46.4082%" y="277" width="8.6887%" height="15" fill="rgb(220,129,5)" fg:x="4070" fg:w="762"/><text x="46.6582%" y="287.50">std::_Hashta..</text></g><g><title>std::__detail::_Hash_code_base&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_bucket_index (97 samples, 1.11%)</title><rect x="53.9909%" y="261" width="1.1060%" height="15" fill="rgb(242,17,10)" fg:x="4735" fg:w="97"/><text x="54.2409%" y="271.50"></text></g><g><title>std::__detail::_Mod_range_hashing::operator (11 samples, 0.13%)</title><rect x="54.9715%" y="245" width="0.1254%" height="15" fill="rgb(242,107,0)" fg:x="4821" fg:w="11"/><text x="55.2215%" y="255.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_M_next_bkt (9 samples, 0.10%)</title><rect x="55.3934%" y="261" width="0.1026%" height="15" fill="rgb(251,28,31)" fg:x="4858" fg:w="9"/><text x="55.6434%" y="271.50"></text></g><g><title>unsigned long const* std::lower_bound&lt;unsigned long const*, unsigned long&gt; (1 samples, 0.01%)</title><rect x="55.4846%" y="245" width="0.0114%" height="15" fill="rgb(233,223,10)" fg:x="4866" fg:w="1"/><text x="55.7346%" y="255.50"></text></g><g><title>unsigned long const* std::__lower_bound&lt;unsigned long const*, unsigned long, __gnu_cxx::__ops::_Iter_less_val&gt; (1 samples, 0.01%)</title><rect x="55.4846%" y="229" width="0.0114%" height="15" fill="rgb(215,21,27)" fg:x="4866" fg:w="1"/><text x="55.7346%" y="239.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_insert_unique_node (1,013 samples, 11.55%)</title><rect x="43.9681%" y="293" width="11.5507%" height="15" fill="rgb(232,23,21)" fg:x="3856" fg:w="1013"/><text x="44.2181%" y="303.50">std::_Hashtable&lt;c..</text></g><g><title>std::__detail::_Prime_rehash_policy::_M_need_rehash (37 samples, 0.42%)</title><rect x="55.0969%" y="277" width="0.4219%" height="15" fill="rgb(244,5,23)" fg:x="4832" fg:w="37"/><text x="55.3469%" y="287.50"></text></g><g><title>unsigned long const&amp; std::max&lt;unsigned long&gt; (2 samples, 0.02%)</title><rect x="55.4960%" y="261" width="0.0228%" height="15" fill="rgb(226,81,46)" fg:x="4867" fg:w="2"/><text x="55.7460%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.7811%" y="149" width="0.0114%" height="15" fill="rgb(247,70,30)" fg:x="5769" fg:w="1"/><text x="66.0311%" y="159.50"></text></g><g><title>[libc.so.6] (5 samples, 0.06%)</title><rect x="65.7469%" y="165" width="0.0570%" height="15" fill="rgb(212,68,19)" fg:x="5766" fg:w="5"/><text x="65.9969%" y="175.50"></text></g><g><title>__mprotect (1 samples, 0.01%)</title><rect x="65.7925%" y="149" width="0.0114%" height="15" fill="rgb(240,187,13)" fg:x="5770" fg:w="1"/><text x="66.0425%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="65.7925%" y="133" width="0.0114%" height="15" fill="rgb(223,113,26)" fg:x="5770" fg:w="1"/><text x="66.0425%" y="143.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::allocate (904 samples, 10.31%)</title><rect x="55.5188%" y="261" width="10.3079%" height="15" fill="rgb(206,192,2)" fg:x="4869" fg:w="904"/><text x="55.7688%" y="271.50">std::allocator_..</text></g><g><title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt;::allocate (904 samples, 10.31%)</title><rect x="55.5188%" y="245" width="10.3079%" height="15" fill="rgb(241,108,4)" fg:x="4869" fg:w="904"/><text x="55.7688%" y="255.50">std::allocator&lt;..</text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt;::allocate (904 samples, 10.31%)</title><rect x="55.5188%" y="229" width="10.3079%" height="15" fill="rgb(247,173,49)" fg:x="4869" fg:w="904"/><text x="55.7688%" y="239.50">std::__new_allo..</text></g><g><title>operator new (904 samples, 10.31%)</title><rect x="55.5188%" y="213" width="10.3079%" height="15" fill="rgb(224,114,35)" fg:x="4869" fg:w="904"/><text x="55.7688%" y="223.50">operator new</text></g><g><title>malloc (887 samples, 10.11%)</title><rect x="55.7127%" y="197" width="10.1140%" height="15" fill="rgb(245,159,27)" fg:x="4886" fg:w="887"/><text x="55.9627%" y="207.50">malloc</text></g><g><title>[libc.so.6] (698 samples, 7.96%)</title><rect x="57.8677%" y="181" width="7.9590%" height="15" fill="rgb(245,172,44)" fg:x="5075" fg:w="698"/><text x="58.1177%" y="191.50">[libc.so.6]</text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="65.8039%" y="165" width="0.0228%" height="15" fill="rgb(236,23,11)" fg:x="5771" fg:w="2"/><text x="66.0539%" y="175.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="65.8039%" y="149" width="0.0228%" height="15" fill="rgb(205,117,38)" fg:x="5771" fg:w="2"/><text x="66.0539%" y="159.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Scoped_node::_Scoped_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;char const&amp;&gt;, std::tuple&lt;&gt; &gt; (909 samples, 10.36%)</title><rect x="55.5188%" y="293" width="10.3649%" height="15" fill="rgb(237,72,25)" fg:x="4869" fg:w="909"/><text x="55.7688%" y="303.50">std::_Hashtable..</text></g><g><title>std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt;* std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_allocate_node&lt;std::piecewise_construct_t const&amp;, std::tuple&lt;char const&amp;&gt;, std::tuple&lt;&gt; &gt; (909 samples, 10.36%)</title><rect x="55.5188%" y="277" width="10.3649%" height="15" fill="rgb(244,70,9)" fg:x="4869" fg:w="909"/><text x="55.7688%" y="287.50">std::__detail::..</text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::construct&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::piecewise_construct_t const&amp;, std::tuple&lt;char const&amp;&gt;, std::tuple&lt;&gt; &gt; (5 samples, 0.06%)</title><rect x="65.8267%" y="261" width="0.0570%" height="15" fill="rgb(217,125,39)" fg:x="5773" fg:w="5"/><text x="66.0767%" y="271.50"></text></g><g><title>decltype  (5 samples, 0.06%)</title><rect x="65.8267%" y="245" width="0.0570%" height="15" fill="rgb(235,36,10)" fg:x="5773" fg:w="5"/><text x="66.0767%" y="255.50"></text></g><g><title>std::pair&lt;char const, wolf::WordTrieNode*&gt;::pair&lt;char const&amp;&gt; (5 samples, 0.06%)</title><rect x="65.8267%" y="229" width="0.0570%" height="15" fill="rgb(251,123,47)" fg:x="5773" fg:w="5"/><text x="66.0767%" y="239.50"></text></g><g><title>std::pair&lt;char const, wolf::WordTrieNode*&gt;::pair&lt;char const&amp;, 0ul&gt; (5 samples, 0.06%)</title><rect x="65.8267%" y="213" width="0.0570%" height="15" fill="rgb(221,13,13)" fg:x="5773" fg:w="5"/><text x="66.0767%" y="223.50"></text></g><g><title>std::unordered_map&lt;char, wolf::WordTrieNode*, std::hash&lt;char&gt;, std::equal_to&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt; &gt;::operator[] (2,042 samples, 23.28%)</title><rect x="42.6340%" y="325" width="23.2839%" height="15" fill="rgb(238,131,9)" fg:x="3739" fg:w="2042"/><text x="42.8840%" y="335.50">std::unordered_map&lt;char, wolf::WordTr..</text></g><g><title>std::__detail::_Map_base&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt;, true&gt;::operator[] (2,042 samples, 23.28%)</title><rect x="42.6340%" y="309" width="23.2839%" height="15" fill="rgb(211,50,8)" fg:x="3739" fg:w="2042"/><text x="42.8840%" y="319.50">std::__detail::_Map_base&lt;char, std::p..</text></g><g><title>std::__detail::_Hash_code_base&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::__detail::_Select1st, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, false&gt;::_M_hash_code (3 samples, 0.03%)</title><rect x="65.8837%" y="293" width="0.0342%" height="15" fill="rgb(245,182,24)" fg:x="5778" fg:w="3"/><text x="66.1337%" y="303.50"></text></g><g><title>std::hash&lt;char&gt;::operator (3 samples, 0.03%)</title><rect x="65.8837%" y="277" width="0.0342%" height="15" fill="rgb(242,14,37)" fg:x="5778" fg:w="3"/><text x="66.1337%" y="287.50"></text></g><g><title>std::_Function_handler&lt;void (), wolf::MultiTrieFilter::insert_all(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;)::$_0&gt;::_M_invoke (5,115 samples, 58.32%)</title><rect x="7.7081%" y="405" width="58.3238%" height="15" fill="rgb(246,228,12)" fg:x="676" fg:w="5115"/><text x="7.9581%" y="415.50">std::_Function_handler&lt;void (), wolf::MultiTrieFilter::insert_all(std::vector&lt;std::__cxx11::basi..</text></g><g><title>std::enable_if&lt;is_invocable_r_v&lt;void, wolf::MultiTrieFilter::insert_all(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;)::$_0&amp;&gt;, void&gt;::type std::__invoke_r&lt;void, wolf::MultiTrieFilter::insert_all(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;)::$_0&amp;&gt; (5,115 samples, 58.32%)</title><rect x="7.7081%" y="389" width="58.3238%" height="15" fill="rgb(213,55,15)" fg:x="676" fg:w="5115"/><text x="7.9581%" y="399.50">std::enable_if&lt;is_invocable_r_v&lt;void, wolf::MultiTrieFilter::insert_all(std::vector&lt;std::__cxx11..</text></g><g><title>void std::__invoke_impl&lt;void, wolf::MultiTrieFilter::insert_all(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;)::$_0&amp;&gt; (5,115 samples, 58.32%)</title><rect x="7.7081%" y="373" width="58.3238%" height="15" fill="rgb(209,9,3)" fg:x="676" fg:w="5115"/><text x="7.9581%" y="383.50">void std::__invoke_impl&lt;void, wolf::MultiTrieFilter::insert_all(std::vector&lt;std::__cxx11::basic_..</text></g><g><title>wolf::MultiTrieFilter::insert_all (5,115 samples, 58.32%)</title><rect x="7.7081%" y="357" width="58.3238%" height="15" fill="rgb(230,59,30)" fg:x="676" fg:w="5115"/><text x="7.9581%" y="367.50">wolf::MultiTrieFilter::insert_all</text></g><g><title>wolf::WordTrie::insert (5,111 samples, 58.28%)</title><rect x="7.7537%" y="341" width="58.2782%" height="15" fill="rgb(209,121,21)" fg:x="680" fg:w="5111"/><text x="8.0037%" y="351.50">wolf::WordTrie::insert</text></g><g><title>wolf::WordTrieNode::WordTrieNode (10 samples, 0.11%)</title><rect x="65.9179%" y="325" width="0.1140%" height="15" fill="rgb(220,109,13)" fg:x="5781" fg:w="10"/><text x="66.1679%" y="335.50"></text></g><g><title>std::unordered_map&lt;char, wolf::WordTrieNode*, std::hash&lt;char&gt;, std::equal_to&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt; &gt;::unordered_map (10 samples, 0.11%)</title><rect x="65.9179%" y="309" width="0.1140%" height="15" fill="rgb(232,18,1)" fg:x="5781" fg:w="10"/><text x="66.1679%" y="319.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_Hashtable (10 samples, 0.11%)</title><rect x="65.9179%" y="293" width="0.1140%" height="15" fill="rgb(215,41,42)" fg:x="5781" fg:w="10"/><text x="66.1679%" y="303.50"></text></g><g><title>std::__detail::_Prime_rehash_policy::_Prime_rehash_policy (7 samples, 0.08%)</title><rect x="65.9521%" y="277" width="0.0798%" height="15" fill="rgb(224,123,36)" fg:x="5784" fg:w="7"/><text x="66.2021%" y="287.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::_M_allocate (114 samples, 1.30%)</title><rect x="66.0433%" y="325" width="1.2999%" height="15" fill="rgb(240,125,3)" fg:x="5792" fg:w="114"/><text x="66.2933%" y="335.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::allocate (114 samples, 1.30%)</title><rect x="66.0433%" y="309" width="1.2999%" height="15" fill="rgb(205,98,50)" fg:x="5792" fg:w="114"/><text x="66.2933%" y="319.50"></text></g><g><title>std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;::allocate (114 samples, 1.30%)</title><rect x="66.0433%" y="293" width="1.2999%" height="15" fill="rgb(205,185,37)" fg:x="5792" fg:w="114"/><text x="66.2933%" y="303.50"></text></g><g><title>std::__new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;::allocate (114 samples, 1.30%)</title><rect x="66.0433%" y="277" width="1.2999%" height="15" fill="rgb(238,207,15)" fg:x="5792" fg:w="114"/><text x="66.2933%" y="287.50"></text></g><g><title>operator new (114 samples, 1.30%)</title><rect x="66.0433%" y="261" width="1.2999%" height="15" fill="rgb(213,199,42)" fg:x="5792" fg:w="114"/><text x="66.2933%" y="271.50"></text></g><g><title>malloc (114 samples, 1.30%)</title><rect x="66.0433%" y="245" width="1.2999%" height="15" fill="rgb(235,201,11)" fg:x="5792" fg:w="114"/><text x="66.2933%" y="255.50"></text></g><g><title>[libc.so.6] (114 samples, 1.30%)</title><rect x="66.0433%" y="229" width="1.2999%" height="15" fill="rgb(207,46,11)" fg:x="5792" fg:w="114"/><text x="66.2933%" y="239.50"></text></g><g><title>[libc.so.6] (106 samples, 1.21%)</title><rect x="66.1345%" y="213" width="1.2087%" height="15" fill="rgb(241,35,35)" fg:x="5800" fg:w="106"/><text x="66.3845%" y="223.50"></text></g><g><title>[libc.so.6] (35 samples, 0.40%)</title><rect x="66.9441%" y="197" width="0.3991%" height="15" fill="rgb(243,32,47)" fg:x="5871" fg:w="35"/><text x="67.1941%" y="207.50"></text></g><g><title>std::__future_base::_State_baseV2::_M_do_set (5,231 samples, 59.65%)</title><rect x="7.7081%" y="485" width="59.6465%" height="15" fill="rgb(247,202,23)" fg:x="676" fg:w="5231"/><text x="7.9581%" y="495.50">std::__future_base::_State_baseV2::_M_do_set</text></g><g><title>std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; (), std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_state&lt;std::function&lt;void ()&gt;, std::allocator&lt;int&gt;, void ()&gt;::_M_run()::{lambda()#1}, void&gt; &gt;::_M_invoke (5,231 samples, 59.65%)</title><rect x="7.7081%" y="469" width="59.6465%" height="15" fill="rgb(219,102,11)" fg:x="676" fg:w="5231"/><text x="7.9581%" y="479.50">std::_Function_handler&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Resul..</text></g><g><title>std::enable_if&lt;is_invocable_r_v&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_state&lt;std::function&lt;void ()&gt;, std::allocator&lt;int&gt;, void ()&gt;::_M_run()::{lambda()#1}, void&gt;&amp;&gt;, std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; &gt;::type std::__invoke_r&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_state&lt;std::function&lt;void ()&gt;, std::allocator&lt;int&gt;, void ()&gt;::_M_run()::{lambda()#1}, void&gt;&amp;&gt; (5,231 samples, 59.65%)</title><rect x="7.7081%" y="453" width="59.6465%" height="15" fill="rgb(243,110,44)" fg:x="676" fg:w="5231"/><text x="7.9581%" y="463.50">std::enable_if&lt;is_invocable_r_v&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_bas..</text></g><g><title>std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_base::_Result_base::_Deleter&gt; std::__invoke_impl&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_state&lt;std::function&lt;void ()&gt;, std::allocator&lt;int&gt;, void ()&gt;::_M_run()::{lambda()#1}, void&gt;&amp;&gt; (5,231 samples, 59.65%)</title><rect x="7.7081%" y="437" width="59.6465%" height="15" fill="rgb(222,74,54)" fg:x="676" fg:w="5231"/><text x="7.9581%" y="447.50">std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_base::_Result_base::_Deleter&gt; std:..</text></g><g><title>std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_base::_Result_base::_Deleter&gt;, std::__future_base::_Task_state&lt;std::function&lt;void ()&gt;, std::allocator&lt;int&gt;, void ()&gt;::_M_run()::{lambda()#1}, void&gt;::operator (5,231 samples, 59.65%)</title><rect x="7.7081%" y="421" width="59.6465%" height="15" fill="rgb(216,99,12)" fg:x="676" fg:w="5231"/><text x="7.9581%" y="431.50">std::__future_base::_Task_setter&lt;std::unique_ptr&lt;std::__future_base::_Result&lt;void&gt;, std::__future_b..</text></g><g><title>wolf::WordTrie::collect_words_rec (116 samples, 1.32%)</title><rect x="66.0319%" y="405" width="1.3227%" height="15" fill="rgb(226,22,26)" fg:x="5791" fg:w="116"/><text x="66.2819%" y="415.50"></text></g><g><title>wolf::WordTrie::collect_words_rec (116 samples, 1.32%)</title><rect x="66.0319%" y="389" width="1.3227%" height="15" fill="rgb(217,163,10)" fg:x="5791" fg:w="116"/><text x="66.2819%" y="399.50"></text></g><g><title>wolf::WordTrie::collect_words_rec (116 samples, 1.32%)</title><rect x="66.0319%" y="373" width="1.3227%" height="15" fill="rgb(213,25,53)" fg:x="5791" fg:w="116"/><text x="66.2819%" y="383.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::push_back (115 samples, 1.31%)</title><rect x="66.0433%" y="357" width="1.3113%" height="15" fill="rgb(252,105,26)" fg:x="5792" fg:w="115"/><text x="66.2933%" y="367.50"></text></g><g><title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const* const&amp;&gt; (115 samples, 1.31%)</title><rect x="66.0433%" y="341" width="1.3113%" height="15" fill="rgb(220,39,43)" fg:x="5792" fg:w="115"/><text x="66.2933%" y="351.50"></text></g><g><title>std::_Vector_base&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::_M_deallocate (1 samples, 0.01%)</title><rect x="67.3432%" y="325" width="0.0114%" height="15" fill="rgb(229,68,48)" fg:x="5906" fg:w="1"/><text x="67.5932%" y="335.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::deallocate (1 samples, 0.01%)</title><rect x="67.3432%" y="309" width="0.0114%" height="15" fill="rgb(252,8,32)" fg:x="5906" fg:w="1"/><text x="67.5932%" y="319.50"></text></g><g><title>std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;::deallocate (1 samples, 0.01%)</title><rect x="67.3432%" y="293" width="0.0114%" height="15" fill="rgb(223,20,43)" fg:x="5906" fg:w="1"/><text x="67.5932%" y="303.50"></text></g><g><title>std::__new_allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt;::deallocate (1 samples, 0.01%)</title><rect x="67.3432%" y="277" width="0.0114%" height="15" fill="rgb(229,81,49)" fg:x="5906" fg:w="1"/><text x="67.5932%" y="287.50"></text></g><g><title>std::__future_base::_Task_state&lt;std::function&lt;void ()&gt;, std::allocator&lt;int&gt;, void ()&gt;::_M_run (5,238 samples, 59.73%)</title><rect x="7.6397%" y="565" width="59.7263%" height="15" fill="rgb(236,28,36)" fg:x="670" fg:w="5238"/><text x="7.8897%" y="575.50">std::__future_base::_Task_state&lt;std::function&lt;void ()&gt;, std::allocator&lt;int&gt;, void ()&gt;::_M_run</text></g><g><title>std::__future_base::_State_baseV2::_M_set_result (5,237 samples, 59.71%)</title><rect x="7.6511%" y="549" width="59.7149%" height="15" fill="rgb(249,185,26)" fg:x="671" fg:w="5237"/><text x="7.9011%" y="559.50">std::__future_base::_State_baseV2::_M_set_result</text></g><g><title>void std::call_once&lt;void (std::__future_base::_State_baseV2::*)(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*), std::__future_base::_State_baseV2*, std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*&gt; (5,235 samples, 59.69%)</title><rect x="7.6739%" y="533" width="59.6921%" height="15" fill="rgb(249,174,33)" fg:x="673" fg:w="5235"/><text x="7.9239%" y="543.50">void std::call_once&lt;void (std::__future_base::_State_baseV2::*)(std::function&lt;std::unique_ptr&lt;std::..</text></g><g><title>__gthread_once (5,235 samples, 59.69%)</title><rect x="7.6739%" y="517" width="59.6921%" height="15" fill="rgb(233,201,37)" fg:x="673" fg:w="5235"/><text x="7.9239%" y="527.50">__gthread_once</text></g><g><title>[libc.so.6] (5,235 samples, 59.69%)</title><rect x="7.6739%" y="501" width="59.6921%" height="15" fill="rgb(221,78,26)" fg:x="673" fg:w="5235"/><text x="7.9239%" y="511.50">[libc.so.6]</text></g><g><title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;void (std::__future_base::_State_baseV2::*)(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*), std::__future_base::_State_baseV2*, std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*&gt;(std::once_flag&amp;, void (std::__future_base::_State_baseV2::*&amp;&amp;)(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*), std::__future_base::_State_baseV2*&amp;&amp;, std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*&amp;&amp;, bool*&amp;&amp;)::{lambda()#1}&gt; (1 samples, 0.01%)</title><rect x="67.3546%" y="485" width="0.0114%" height="15" fill="rgb(250,127,30)" fg:x="5907" fg:w="1"/><text x="67.6046%" y="495.50"></text></g><g><title>std::once_flag::_Prepare_execution::_Prepare_execution&lt;std::call_once&lt;void (std::__future_base::_State_baseV2::*)(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*), std::__future_base::_State_baseV2*, std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*&gt;(std::once_flag&amp;, void (std::__future_base::_State_baseV2::*&amp;&amp;)(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*), std::__future_base::_State_baseV2*&amp;&amp;, std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*&amp;&amp;, bool*&amp;&amp;)::{lambda()#1}&gt; (1 samples, 0.01%)</title><rect x="67.3546%" y="469" width="0.0114%" height="15" fill="rgb(230,49,44)" fg:x="5907" fg:w="1"/><text x="67.6046%" y="479.50"></text></g><g><title>std::call_once&lt;void (std::__future_base::_State_baseV2::*)(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*), std::__future_base::_State_baseV2*, std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*&gt; (1 samples, 0.01%)</title><rect x="67.3546%" y="453" width="0.0114%" height="15" fill="rgb(229,67,23)" fg:x="5907" fg:w="1"/><text x="67.6046%" y="463.50"></text></g><g><title>std::__invoke_result&lt;void (std::__future_base::_State_baseV2::*)(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*), std::__future_base::_State_baseV2*, std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*&gt;::type std::__invoke&lt;void (std::__future_base::_State_baseV2::*)(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*), std::__future_base::_State_baseV2*, std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*&gt; (1 samples, 0.01%)</title><rect x="67.3546%" y="437" width="0.0114%" height="15" fill="rgb(249,83,47)" fg:x="5907" fg:w="1"/><text x="67.6046%" y="447.50"></text></g><g><title>void std::__invoke_impl&lt;void, void (std::__future_base::_State_baseV2::*)(std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*), std::__future_base::_State_baseV2*, std::function&lt;std::unique_ptr&lt;std::__future_base::_Result_base, std::__future_base::_Result_base::_Deleter&gt; ()&gt;*, bool*&gt; (1 samples, 0.01%)</title><rect x="67.3546%" y="421" width="0.0114%" height="15" fill="rgb(215,43,3)" fg:x="5907" fg:w="1"/><text x="67.6046%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="67.4914%" y="533" width="0.0114%" height="15" fill="rgb(238,154,13)" fg:x="5919" fg:w="1"/><text x="67.7414%" y="543.50"></text></g><g><title>std::function&lt;void ()&gt;::function (18 samples, 0.21%)</title><rect x="67.3660%" y="549" width="0.2052%" height="15" fill="rgb(219,56,2)" fg:x="5908" fg:w="18"/><text x="67.6160%" y="559.50"></text></g><g><title>std::_Function_base::_Function_base (6 samples, 0.07%)</title><rect x="67.5029%" y="533" width="0.0684%" height="15" fill="rgb(233,0,4)" fg:x="5920" fg:w="6"/><text x="67.7529%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="67.5599%" y="517" width="0.0114%" height="15" fill="rgb(235,30,7)" fg:x="5925" fg:w="1"/><text x="67.8099%" y="527.50"></text></g><g><title>std::function&lt;void ()&gt;::operator= (24 samples, 0.27%)</title><rect x="67.3660%" y="565" width="0.2737%" height="15" fill="rgb(250,79,13)" fg:x="5908" fg:w="24"/><text x="67.6160%" y="575.50"></text></g><g><title>std::function&lt;void ()&gt;::swap (6 samples, 0.07%)</title><rect x="67.5713%" y="549" width="0.0684%" height="15" fill="rgb(211,146,34)" fg:x="5926" fg:w="6"/><text x="67.8213%" y="559.50"></text></g><g><title>std::enable_if&lt;__and_&lt;std::__not_&lt;std::__is_tuple_like&lt;std::_Any_data&gt; &gt;, std::is_move_constructible&lt;std::_Any_data&gt;, std::is_move_assignable&lt;std::_Any_data&gt; &gt;::value, void&gt;::type std::swap&lt;std::_Any_data&gt; (6 samples, 0.07%)</title><rect x="67.5713%" y="533" width="0.0684%" height="15" fill="rgb(228,22,38)" fg:x="5926" fg:w="6"/><text x="67.8213%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="67.6283%" y="517" width="0.0114%" height="15" fill="rgb(235,168,5)" fg:x="5931" fg:w="1"/><text x="67.8783%" y="527.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unique_lock (17 samples, 0.19%)</title><rect x="67.6397%" y="565" width="0.1938%" height="15" fill="rgb(221,155,16)" fg:x="5932" fg:w="17"/><text x="67.8897%" y="575.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::lock (17 samples, 0.19%)</title><rect x="67.6397%" y="549" width="0.1938%" height="15" fill="rgb(215,215,53)" fg:x="5932" fg:w="17"/><text x="67.8897%" y="559.50"></text></g><g><title>std::mutex::lock (17 samples, 0.19%)</title><rect x="67.6397%" y="533" width="0.1938%" height="15" fill="rgb(223,4,10)" fg:x="5932" fg:w="17"/><text x="67.8897%" y="543.50"></text></g><g><title>__gthread_mutex_lock (17 samples, 0.19%)</title><rect x="67.6397%" y="517" width="0.1938%" height="15" fill="rgb(234,103,6)" fg:x="5932" fg:w="17"/><text x="67.8897%" y="527.50"></text></g><g><title>pthread_mutex_lock (17 samples, 0.19%)</title><rect x="67.6397%" y="501" width="0.1938%" height="15" fill="rgb(227,97,0)" fg:x="5932" fg:w="17"/><text x="67.8897%" y="511.50"></text></g><g><title>[libc.so.6] (3 samples, 0.03%)</title><rect x="67.9247%" y="485" width="0.0342%" height="15" fill="rgb(234,150,53)" fg:x="5957" fg:w="3"/><text x="68.1747%" y="495.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="67.9247%" y="469" width="0.0342%" height="15" fill="rgb(228,201,54)" fg:x="5957" fg:w="3"/><text x="68.1747%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="67.9247%" y="453" width="0.0342%" height="15" fill="rgb(222,22,37)" fg:x="5957" fg:w="3"/><text x="68.1747%" y="463.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="67.9361%" y="437" width="0.0228%" height="15" fill="rgb(237,53,32)" fg:x="5958" fg:w="2"/><text x="68.1861%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="67.9475%" y="421" width="0.0114%" height="15" fill="rgb(233,25,53)" fg:x="5959" fg:w="1"/><text x="68.1975%" y="431.50"></text></g><g><title>[libc.so.6] (12 samples, 0.14%)</title><rect x="67.8335%" y="501" width="0.1368%" height="15" fill="rgb(210,40,34)" fg:x="5949" fg:w="12"/><text x="68.0835%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="67.9590%" y="485" width="0.0114%" height="15" fill="rgb(241,220,44)" fg:x="5960" fg:w="1"/><text x="68.2090%" y="495.50"></text></g><g><title>pthread_mutex_lock (1 samples, 0.01%)</title><rect x="67.9704%" y="501" width="0.0114%" height="15" fill="rgb(235,28,35)" fg:x="5961" fg:w="1"/><text x="68.2204%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="67.9704%" y="485" width="0.0114%" height="15" fill="rgb(210,56,17)" fg:x="5961" fg:w="1"/><text x="68.2204%" y="495.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::~unique_lock (15 samples, 0.17%)</title><rect x="67.8335%" y="565" width="0.1710%" height="15" fill="rgb(224,130,29)" fg:x="5949" fg:w="15"/><text x="68.0835%" y="575.50"></text></g><g><title>std::unique_lock&lt;std::mutex&gt;::unlock (15 samples, 0.17%)</title><rect x="67.8335%" y="549" width="0.1710%" height="15" fill="rgb(235,212,8)" fg:x="5949" fg:w="15"/><text x="68.0835%" y="559.50"></text></g><g><title>std::mutex::unlock (15 samples, 0.17%)</title><rect x="67.8335%" y="533" width="0.1710%" height="15" fill="rgb(223,33,50)" fg:x="5949" fg:w="15"/><text x="68.0835%" y="543.50"></text></g><g><title>__gthread_mutex_unlock (15 samples, 0.17%)</title><rect x="67.8335%" y="517" width="0.1710%" height="15" fill="rgb(219,149,13)" fg:x="5949" fg:w="15"/><text x="68.0835%" y="527.50"></text></g><g><title>pthread_mutex_unlock (2 samples, 0.02%)</title><rect x="67.9818%" y="501" width="0.0228%" height="15" fill="rgb(250,156,29)" fg:x="5962" fg:w="2"/><text x="68.2318%" y="511.50"></text></g><g><title>__gthread_cond_wait (2 samples, 0.02%)</title><rect x="68.0502%" y="517" width="0.0228%" height="15" fill="rgb(216,193,19)" fg:x="5968" fg:w="2"/><text x="68.3002%" y="527.50"></text></g><g><title>[libc.so.6] (56 samples, 0.64%)</title><rect x="70.1482%" y="469" width="0.6385%" height="15" fill="rgb(216,135,14)" fg:x="6152" fg:w="56"/><text x="70.3982%" y="479.50"></text></g><g><title>[unknown] (11 samples, 0.13%)</title><rect x="70.6613%" y="453" width="0.1254%" height="15" fill="rgb(241,47,5)" fg:x="6197" fg:w="11"/><text x="70.9113%" y="463.50"></text></g><g><title>[unknown] (6 samples, 0.07%)</title><rect x="70.7184%" y="437" width="0.0684%" height="15" fill="rgb(233,42,35)" fg:x="6202" fg:w="6"/><text x="70.9684%" y="447.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="70.7526%" y="421" width="0.0342%" height="15" fill="rgb(231,13,6)" fg:x="6205" fg:w="3"/><text x="71.0026%" y="431.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="70.7640%" y="405" width="0.0228%" height="15" fill="rgb(207,181,40)" fg:x="6206" fg:w="2"/><text x="71.0140%" y="415.50"></text></g><g><title>[unknown] (2 samples, 0.02%)</title><rect x="70.7640%" y="389" width="0.0228%" height="15" fill="rgb(254,173,49)" fg:x="6206" fg:w="2"/><text x="71.0140%" y="399.50"></text></g><g><title>[libc.so.6] (179 samples, 2.04%)</title><rect x="68.9054%" y="485" width="2.0410%" height="15" fill="rgb(221,1,38)" fg:x="6043" fg:w="179"/><text x="69.1554%" y="495.50">[..</text></g><g><title>[unknown] (14 samples, 0.16%)</title><rect x="70.7868%" y="469" width="0.1596%" height="15" fill="rgb(206,124,46)" fg:x="6208" fg:w="14"/><text x="71.0368%" y="479.50"></text></g><g><title>[unknown] (3 samples, 0.03%)</title><rect x="70.9122%" y="453" width="0.0342%" height="15" fill="rgb(249,21,11)" fg:x="6219" fg:w="3"/><text x="71.1622%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="70.9350%" y="437" width="0.0114%" height="15" fill="rgb(222,201,40)" fg:x="6221" fg:w="1"/><text x="71.1850%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="70.9350%" y="421" width="0.0114%" height="15" fill="rgb(235,61,29)" fg:x="6221" fg:w="1"/><text x="71.1850%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="70.9350%" y="405" width="0.0114%" height="15" fill="rgb(219,207,3)" fg:x="6221" fg:w="1"/><text x="71.1850%" y="415.50"></text></g><g><title>[unknown] (7 samples, 0.08%)</title><rect x="70.9464%" y="485" width="0.0798%" height="15" fill="rgb(222,56,46)" fg:x="6222" fg:w="7"/><text x="71.1964%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="71.0148%" y="469" width="0.0114%" height="15" fill="rgb(239,76,54)" fg:x="6228" fg:w="1"/><text x="71.2648%" y="479.50"></text></g><g><title>_pthread_cleanup_pop (5 samples, 0.06%)</title><rect x="71.0262%" y="485" width="0.0570%" height="15" fill="rgb(231,124,27)" fg:x="6229" fg:w="5"/><text x="71.2762%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="71.0718%" y="469" width="0.0114%" height="15" fill="rgb(249,195,6)" fg:x="6233" fg:w="1"/><text x="71.3218%" y="479.50"></text></g><g><title>std::condition_variable::wait (270 samples, 3.08%)</title><rect x="68.0160%" y="549" width="3.0787%" height="15" fill="rgb(237,174,47)" fg:x="5965" fg:w="270"/><text x="68.2660%" y="559.50">std..</text></g><g><title>std::__condvar::wait (270 samples, 3.08%)</title><rect x="68.0160%" y="533" width="3.0787%" height="15" fill="rgb(206,201,31)" fg:x="5965" fg:w="270"/><text x="68.2660%" y="543.50">std..</text></g><g><title>std::condition_variable::wait (265 samples, 3.02%)</title><rect x="68.0730%" y="517" width="3.0217%" height="15" fill="rgb(231,57,52)" fg:x="5970" fg:w="265"/><text x="68.3230%" y="527.50">std..</text></g><g><title>pthread_cond_wait (265 samples, 3.02%)</title><rect x="68.0730%" y="501" width="3.0217%" height="15" fill="rgb(248,177,22)" fg:x="5970" fg:w="265"/><text x="68.3230%" y="511.50">pth..</text></g><g><title>_pthread_cleanup_push (1 samples, 0.01%)</title><rect x="71.0832%" y="485" width="0.0114%" height="15" fill="rgb(215,211,37)" fg:x="6234" fg:w="1"/><text x="71.3332%" y="495.50"></text></g><g><title>[libc.so.6] (6,183 samples, 70.50%)</title><rect x="0.8552%" y="613" width="70.5017%" height="15" fill="rgb(241,128,51)" fg:x="75" fg:w="6183"/><text x="1.1052%" y="623.50">[libc.so.6]</text></g><g><title>execute_native_thread_routine (5,617 samples, 64.05%)</title><rect x="7.3090%" y="597" width="64.0479%" height="15" fill="rgb(227,165,31)" fg:x="641" fg:w="5617"/><text x="7.5590%" y="607.50">execute_native_thread_routine</text></g><g><title>wolf::ThreadPool::ThreadPool (5,611 samples, 63.98%)</title><rect x="7.3774%" y="581" width="63.9795%" height="15" fill="rgb(228,167,24)" fg:x="647" fg:w="5611"/><text x="7.6274%" y="591.50">wolf::ThreadPool::ThreadPool</text></g><g><title>void std::condition_variable::wait&lt;wolf::ThreadPool::ThreadPool(unsigned long)::{lambda()#1}::operator()() const::{lambda()#1}&gt; (294 samples, 3.35%)</title><rect x="68.0046%" y="565" width="3.3523%" height="15" fill="rgb(228,143,12)" fg:x="5964" fg:w="294"/><text x="68.2546%" y="575.50">voi..</text></g><g><title>wolf::ThreadPool::ThreadPool (23 samples, 0.26%)</title><rect x="71.0946%" y="549" width="0.2623%" height="15" fill="rgb(249,149,8)" fg:x="6235" fg:w="23"/><text x="71.3446%" y="559.50"></text></g><g><title>[unknown] (7 samples, 0.08%)</title><rect x="71.2771%" y="533" width="0.0798%" height="15" fill="rgb(243,35,44)" fg:x="6251" fg:w="7"/><text x="71.5271%" y="543.50"></text></g><g><title>[libc.so.6] (6,201 samples, 70.71%)</title><rect x="0.7526%" y="629" width="70.7070%" height="15" fill="rgb(246,89,9)" fg:x="66" fg:w="6201"/><text x="1.0026%" y="639.50">[libc.so.6]</text></g><g><title>[unknown] (9 samples, 0.10%)</title><rect x="71.3569%" y="613" width="0.1026%" height="15" fill="rgb(233,213,13)" fg:x="6258" fg:w="9"/><text x="71.6069%" y="623.50"></text></g><g><title>[unknown] (60 samples, 0.68%)</title><rect x="71.4595%" y="629" width="0.6842%" height="15" fill="rgb(233,141,41)" fg:x="6267" fg:w="60"/><text x="71.7095%" y="639.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::~vector (1 samples, 0.01%)</title><rect x="72.1437%" y="549" width="0.0114%" height="15" fill="rgb(239,167,4)" fg:x="6327" fg:w="1"/><text x="72.3937%" y="559.50"></text></g><g><title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="72.1437%" y="533" width="0.0114%" height="15" fill="rgb(209,217,16)" fg:x="6327" fg:w="1"/><text x="72.3937%" y="543.50"></text></g><g><title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (1 samples, 0.01%)</title><rect x="72.1437%" y="517" width="0.0114%" height="15" fill="rgb(219,88,35)" fg:x="6327" fg:w="1"/><text x="72.3937%" y="527.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*&gt; (1 samples, 0.01%)</title><rect x="72.1437%" y="501" width="0.0114%" height="15" fill="rgb(220,193,23)" fg:x="6327" fg:w="1"/><text x="72.3937%" y="511.50"></text></g><g><title>void std::_Destroy&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="72.1437%" y="485" width="0.0114%" height="15" fill="rgb(230,90,52)" fg:x="6327" fg:w="1"/><text x="72.3937%" y="495.50"></text></g><g><title>void std::destroy_at&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="72.1437%" y="469" width="0.0114%" height="15" fill="rgb(252,106,19)" fg:x="6327" fg:w="1"/><text x="72.3937%" y="479.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::~basic_string (1 samples, 0.01%)</title><rect x="72.1437%" y="453" width="0.0114%" height="15" fill="rgb(206,74,20)" fg:x="6327" fg:w="1"/><text x="72.3937%" y="463.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_dispose (1 samples, 0.01%)</title><rect x="72.1437%" y="437" width="0.0114%" height="15" fill="rgb(230,138,44)" fg:x="6327" fg:w="1"/><text x="72.3937%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.01%)</title><rect x="72.1437%" y="421" width="0.0114%" height="15" fill="rgb(235,182,43)" fg:x="6327" fg:w="1"/><text x="72.3937%" y="431.50"></text></g><g><title>wolf::MultiTrieFilter::MultiTrieFilter (1 samples, 0.01%)</title><rect x="72.1551%" y="453" width="0.0114%" height="15" fill="rgb(242,16,51)" fg:x="6328" fg:w="1"/><text x="72.4051%" y="463.50"></text></g><g><title>std::thread&amp; std::vector&lt;std::thread, std::allocator&lt;std::thread&gt; &gt;::emplace_back&lt;wolf::ThreadPool::ThreadPool(unsigned long)::{lambda()#1}&gt; (1 samples, 0.01%)</title><rect x="72.1551%" y="437" width="0.0114%" height="15" fill="rgb(248,9,4)" fg:x="6328" fg:w="1"/><text x="72.4051%" y="447.50"></text></g><g><title>void std::vector&lt;std::thread, std::allocator&lt;std::thread&gt; &gt;::_M_realloc_insert&lt;wolf::ThreadPool::ThreadPool(unsigned long)::{lambda()#1}&gt; (1 samples, 0.01%)</title><rect x="72.1551%" y="421" width="0.0114%" height="15" fill="rgb(210,31,22)" fg:x="6328" fg:w="1"/><text x="72.4051%" y="431.50"></text></g><g><title>std::thread::_M_start_thread (1 samples, 0.01%)</title><rect x="72.1551%" y="405" width="0.0114%" height="15" fill="rgb(239,54,39)" fg:x="6328" fg:w="1"/><text x="72.4051%" y="415.50"></text></g><g><title>std::thread::_M_start_thread (1 samples, 0.01%)</title><rect x="72.1551%" y="389" width="0.0114%" height="15" fill="rgb(230,99,41)" fg:x="6328" fg:w="1"/><text x="72.4051%" y="399.50"></text></g><g><title>pthread_create (1 samples, 0.01%)</title><rect x="72.1551%" y="373" width="0.0114%" height="15" fill="rgb(253,106,12)" fg:x="6328" fg:w="1"/><text x="72.4051%" y="383.50"></text></g><g><title>_dl_allocate_tls (1 samples, 0.01%)</title><rect x="72.1551%" y="357" width="0.0114%" height="15" fill="rgb(213,46,41)" fg:x="6328" fg:w="1"/><text x="72.4051%" y="367.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.01%)</title><rect x="72.1551%" y="341" width="0.0114%" height="15" fill="rgb(215,133,35)" fg:x="6328" fg:w="1"/><text x="72.4051%" y="351.50"></text></g><g><title>wolf::MultiTrieFilter::filter (1 samples, 0.01%)</title><rect x="72.1665%" y="453" width="0.0114%" height="15" fill="rgb(213,28,5)" fg:x="6329" fg:w="1"/><text x="72.4165%" y="463.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::clear (1 samples, 0.01%)</title><rect x="72.1665%" y="437" width="0.0114%" height="15" fill="rgb(215,77,49)" fg:x="6329" fg:w="1"/><text x="72.4165%" y="447.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const*&gt; &gt;::_M_erase_at_end (1 samples, 0.01%)</title><rect x="72.1665%" y="421" width="0.0114%" height="15" fill="rgb(248,100,22)" fg:x="6329" fg:w="1"/><text x="72.4165%" y="431.50"></text></g><g><title>std::__basic_future&lt;void&gt;::wait (4 samples, 0.05%)</title><rect x="72.1893%" y="437" width="0.0456%" height="15" fill="rgb(208,67,9)" fg:x="6331" fg:w="4"/><text x="72.4393%" y="447.50"></text></g><g><title>std::__future_base::_State_baseV2::wait (4 samples, 0.05%)</title><rect x="72.1893%" y="421" width="0.0456%" height="15" fill="rgb(219,133,21)" fg:x="6331" fg:w="4"/><text x="72.4393%" y="431.50"></text></g><g><title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_when_equal (4 samples, 0.05%)</title><rect x="72.1893%" y="405" width="0.0456%" height="15" fill="rgb(246,46,29)" fg:x="6331" fg:w="4"/><text x="72.4393%" y="415.50"></text></g><g><title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_and_test (4 samples, 0.05%)</title><rect x="72.1893%" y="389" width="0.0456%" height="15" fill="rgb(246,185,52)" fg:x="6331" fg:w="4"/><text x="72.4393%" y="399.50"></text></g><g><title>std::__atomic_futex_unsigned&lt;2147483648u&gt;::_M_load_and_test_until (4 samples, 0.05%)</title><rect x="72.1893%" y="373" width="0.0456%" height="15" fill="rgb(252,136,11)" fg:x="6331" fg:w="4"/><text x="72.4393%" y="383.50"></text></g><g><title>std::__atomic_futex_unsigned_base::_M_futex_wait_until (4 samples, 0.05%)</title><rect x="72.1893%" y="357" width="0.0456%" height="15" fill="rgb(219,138,53)" fg:x="6331" fg:w="4"/><text x="72.4393%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="72.2235%" y="341" width="0.0114%" height="15" fill="rgb(211,51,23)" fg:x="6334" fg:w="1"/><text x="72.4735%" y="351.50"></text></g><g><title>wolf::MultiTrieFilter::insert_all (6 samples, 0.07%)</title><rect x="72.1779%" y="453" width="0.0684%" height="15" fill="rgb(247,221,28)" fg:x="6330" fg:w="6"/><text x="72.4279%" y="463.50"></text></g><g><title>std::vector&lt;std::future&lt;void&gt;, std::allocator&lt;std::future&lt;void&gt; &gt; &gt;::~vector (1 samples, 0.01%)</title><rect x="72.2349%" y="437" width="0.0114%" height="15" fill="rgb(251,222,45)" fg:x="6335" fg:w="1"/><text x="72.4849%" y="447.50"></text></g><g><title>void std::_Destroy&lt;std::future&lt;void&gt;*, std::future&lt;void&gt; &gt; (1 samples, 0.01%)</title><rect x="72.2349%" y="421" width="0.0114%" height="15" fill="rgb(217,162,53)" fg:x="6335" fg:w="1"/><text x="72.4849%" y="431.50"></text></g><g><title>void std::_Destroy&lt;std::future&lt;void&gt;*&gt; (1 samples, 0.01%)</title><rect x="72.2349%" y="405" width="0.0114%" height="15" fill="rgb(229,93,14)" fg:x="6335" fg:w="1"/><text x="72.4849%" y="415.50"></text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;std::future&lt;void&gt;*&gt; (1 samples, 0.01%)</title><rect x="72.2349%" y="389" width="0.0114%" height="15" fill="rgb(209,67,49)" fg:x="6335" fg:w="1"/><text x="72.4849%" y="399.50"></text></g><g><title>std::_Sp_counted_ptr_inplace&lt;std::__future_base::_Task_state&lt;std::function&lt;void ()&gt;, std::allocator&lt;int&gt;, void ()&gt;, std::allocator&lt;int&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose (1 samples, 0.01%)</title><rect x="72.2349%" y="373" width="0.0114%" height="15" fill="rgb(213,87,29)" fg:x="6335" fg:w="1"/><text x="72.4849%" y="383.50"></text></g><g><title>std::_Function_handler&lt;void (), wolf::MultiTrieFilter::insert_all(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;)::$_0&gt;::_M_manager (1 samples, 0.01%)</title><rect x="72.2349%" y="357" width="0.0114%" height="15" fill="rgb(205,151,52)" fg:x="6335" fg:w="1"/><text x="72.4849%" y="367.50"></text></g><g><title>std::_Function_base::_Base_manager&lt;wolf::MultiTrieFilter::insert_all(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;)::$_0&gt;::_M_manager (1 samples, 0.01%)</title><rect x="72.2349%" y="341" width="0.0114%" height="15" fill="rgb(253,215,39)" fg:x="6335" fg:w="1"/><text x="72.4849%" y="351.50"></text></g><g><title>std::_Function_base::_Base_manager&lt;wolf::MultiTrieFilter::insert_all(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;)::$_0&gt;::_M_destroy (1 samples, 0.01%)</title><rect x="72.2349%" y="325" width="0.0114%" height="15" fill="rgb(221,220,41)" fg:x="6335" fg:w="1"/><text x="72.4849%" y="335.50"></text></g><g><title>cfree (1 samples, 0.01%)</title><rect x="72.2349%" y="309" width="0.0114%" height="15" fill="rgb(218,133,21)" fg:x="6335" fg:w="1"/><text x="72.4849%" y="319.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="72.2349%" y="293" width="0.0114%" height="15" fill="rgb(221,193,43)" fg:x="6335" fg:w="1"/><text x="72.4849%" y="303.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (1 samples, 0.01%)</title><rect x="72.2463%" y="229" width="0.0114%" height="15" fill="rgb(240,128,52)" fg:x="6336" fg:w="1"/><text x="72.4963%" y="239.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (1 samples, 0.01%)</title><rect x="72.2463%" y="213" width="0.0114%" height="15" fill="rgb(253,114,12)" fg:x="6336" fg:w="1"/><text x="72.4963%" y="223.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (1 samples, 0.01%)</title><rect x="72.2463%" y="197" width="0.0114%" height="15" fill="rgb(215,223,47)" fg:x="6336" fg:w="1"/><text x="72.4963%" y="207.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (1 samples, 0.01%)</title><rect x="72.2463%" y="181" width="0.0114%" height="15" fill="rgb(248,225,23)" fg:x="6336" fg:w="1"/><text x="72.4963%" y="191.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (1 samples, 0.01%)</title><rect x="72.2463%" y="165" width="0.0114%" height="15" fill="rgb(250,108,0)" fg:x="6336" fg:w="1"/><text x="72.4963%" y="175.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (1 samples, 0.01%)</title><rect x="72.2463%" y="149" width="0.0114%" height="15" fill="rgb(228,208,7)" fg:x="6336" fg:w="1"/><text x="72.4963%" y="159.50"></text></g><g><title>cfree (1 samples, 0.01%)</title><rect x="72.2463%" y="133" width="0.0114%" height="15" fill="rgb(244,45,10)" fg:x="6336" fg:w="1"/><text x="72.4963%" y="143.50"></text></g><g><title>std::_Function_handler&lt;void (wolf::WordTrieNode*), wolf::WordTrie::clear()::$_0&gt;::_M_invoke (3 samples, 0.03%)</title><rect x="72.2463%" y="341" width="0.0342%" height="15" fill="rgb(207,125,25)" fg:x="6336" fg:w="3"/><text x="72.4963%" y="351.50"></text></g><g><title>std::enable_if&lt;is_invocable_r_v&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt;, void&gt;::type std::__invoke_r&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt; (3 samples, 0.03%)</title><rect x="72.2463%" y="325" width="0.0342%" height="15" fill="rgb(210,195,18)" fg:x="6336" fg:w="3"/><text x="72.4963%" y="335.50"></text></g><g><title>void std::__invoke_impl&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt; (3 samples, 0.03%)</title><rect x="72.2463%" y="309" width="0.0342%" height="15" fill="rgb(249,80,12)" fg:x="6336" fg:w="3"/><text x="72.4963%" y="319.50"></text></g><g><title>wolf::WordTrie::clear (3 samples, 0.03%)</title><rect x="72.2463%" y="293" width="0.0342%" height="15" fill="rgb(221,65,9)" fg:x="6336" fg:w="3"/><text x="72.4963%" y="303.50"></text></g><g><title>wolf::WordTrieNode::~WordTrieNode (3 samples, 0.03%)</title><rect x="72.2463%" y="277" width="0.0342%" height="15" fill="rgb(235,49,36)" fg:x="6336" fg:w="3"/><text x="72.4963%" y="287.50"></text></g><g><title>std::unordered_map&lt;char, wolf::WordTrieNode*, std::hash&lt;char&gt;, std::equal_to&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt; &gt;::~unordered_map (3 samples, 0.03%)</title><rect x="72.2463%" y="261" width="0.0342%" height="15" fill="rgb(225,32,20)" fg:x="6336" fg:w="3"/><text x="72.4963%" y="271.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (3 samples, 0.03%)</title><rect x="72.2463%" y="245" width="0.0342%" height="15" fill="rgb(215,141,46)" fg:x="6336" fg:w="3"/><text x="72.4963%" y="255.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (2 samples, 0.02%)</title><rect x="72.2577%" y="229" width="0.0228%" height="15" fill="rgb(250,160,47)" fg:x="6337" fg:w="2"/><text x="72.5077%" y="239.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (2 samples, 0.02%)</title><rect x="72.2577%" y="213" width="0.0228%" height="15" fill="rgb(216,222,40)" fg:x="6337" fg:w="2"/><text x="72.5077%" y="223.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (2 samples, 0.02%)</title><rect x="72.2577%" y="197" width="0.0228%" height="15" fill="rgb(234,217,39)" fg:x="6337" fg:w="2"/><text x="72.5077%" y="207.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (2 samples, 0.02%)</title><rect x="72.2577%" y="181" width="0.0228%" height="15" fill="rgb(207,178,40)" fg:x="6337" fg:w="2"/><text x="72.5077%" y="191.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::deallocate (2 samples, 0.02%)</title><rect x="72.2577%" y="165" width="0.0228%" height="15" fill="rgb(221,136,13)" fg:x="6337" fg:w="2"/><text x="72.5077%" y="175.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt;::deallocate (2 samples, 0.02%)</title><rect x="72.2577%" y="149" width="0.0228%" height="15" fill="rgb(249,199,10)" fg:x="6337" fg:w="2"/><text x="72.5077%" y="159.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt;::deallocate (2 samples, 0.02%)</title><rect x="72.2577%" y="133" width="0.0228%" height="15" fill="rgb(249,222,13)" fg:x="6337" fg:w="2"/><text x="72.5077%" y="143.50"></text></g><g><title>cfree (2 samples, 0.02%)</title><rect x="72.2577%" y="117" width="0.0228%" height="15" fill="rgb(244,185,38)" fg:x="6337" fg:w="2"/><text x="72.5077%" y="127.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="72.2691%" y="101" width="0.0114%" height="15" fill="rgb(236,202,9)" fg:x="6338" fg:w="1"/><text x="72.5191%" y="111.50"></text></g><g><title>cfree (5 samples, 0.06%)</title><rect x="72.4515%" y="325" width="0.0570%" height="15" fill="rgb(250,229,37)" fg:x="6354" fg:w="5"/><text x="72.7015%" y="335.50"></text></g><g><title>[libc.so.6] (5 samples, 0.06%)</title><rect x="72.4515%" y="309" width="0.0570%" height="15" fill="rgb(206,174,23)" fg:x="6354" fg:w="5"/><text x="72.7015%" y="319.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (4 samples, 0.05%)</title><rect x="72.5086%" y="213" width="0.0456%" height="15" fill="rgb(211,33,43)" fg:x="6359" fg:w="4"/><text x="72.7586%" y="223.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (4 samples, 0.05%)</title><rect x="72.5086%" y="197" width="0.0456%" height="15" fill="rgb(245,58,50)" fg:x="6359" fg:w="4"/><text x="72.7586%" y="207.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (4 samples, 0.05%)</title><rect x="72.5086%" y="181" width="0.0456%" height="15" fill="rgb(244,68,36)" fg:x="6359" fg:w="4"/><text x="72.7586%" y="191.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (4 samples, 0.05%)</title><rect x="72.5086%" y="165" width="0.0456%" height="15" fill="rgb(232,229,15)" fg:x="6359" fg:w="4"/><text x="72.7586%" y="175.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (4 samples, 0.05%)</title><rect x="72.5086%" y="149" width="0.0456%" height="15" fill="rgb(254,30,23)" fg:x="6359" fg:w="4"/><text x="72.7586%" y="159.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (4 samples, 0.05%)</title><rect x="72.5086%" y="133" width="0.0456%" height="15" fill="rgb(235,160,14)" fg:x="6359" fg:w="4"/><text x="72.7586%" y="143.50"></text></g><g><title>cfree (4 samples, 0.05%)</title><rect x="72.5086%" y="117" width="0.0456%" height="15" fill="rgb(212,155,44)" fg:x="6359" fg:w="4"/><text x="72.7586%" y="127.50"></text></g><g><title>[libc.so.6] (3 samples, 0.03%)</title><rect x="72.5200%" y="101" width="0.0342%" height="15" fill="rgb(226,2,50)" fg:x="6360" fg:w="3"/><text x="72.7700%" y="111.50"></text></g><g><title>cfree (45 samples, 0.51%)</title><rect x="72.5884%" y="101" width="0.5131%" height="15" fill="rgb(234,177,6)" fg:x="6366" fg:w="45"/><text x="72.8384%" y="111.50"></text></g><g><title>[libc.so.6] (35 samples, 0.40%)</title><rect x="72.7024%" y="85" width="0.3991%" height="15" fill="rgb(217,24,9)" fg:x="6376" fg:w="35"/><text x="72.9524%" y="95.50"></text></g><g><title>std::_Function_handler&lt;void (wolf::WordTrieNode*), wolf::WordTrie::clear()::$_0&gt;::_M_invoke (55 samples, 0.63%)</title><rect x="72.5086%" y="325" width="0.6271%" height="15" fill="rgb(220,13,46)" fg:x="6359" fg:w="55"/><text x="72.7586%" y="335.50"></text></g><g><title>std::enable_if&lt;is_invocable_r_v&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt;, void&gt;::type std::__invoke_r&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt; (55 samples, 0.63%)</title><rect x="72.5086%" y="309" width="0.6271%" height="15" fill="rgb(239,221,27)" fg:x="6359" fg:w="55"/><text x="72.7586%" y="319.50"></text></g><g><title>void std::__invoke_impl&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt; (55 samples, 0.63%)</title><rect x="72.5086%" y="293" width="0.6271%" height="15" fill="rgb(222,198,25)" fg:x="6359" fg:w="55"/><text x="72.7586%" y="303.50"></text></g><g><title>wolf::WordTrie::clear (55 samples, 0.63%)</title><rect x="72.5086%" y="277" width="0.6271%" height="15" fill="rgb(211,99,13)" fg:x="6359" fg:w="55"/><text x="72.7586%" y="287.50"></text></g><g><title>wolf::WordTrieNode::~WordTrieNode (55 samples, 0.63%)</title><rect x="72.5086%" y="261" width="0.6271%" height="15" fill="rgb(232,111,31)" fg:x="6359" fg:w="55"/><text x="72.7586%" y="271.50"></text></g><g><title>std::unordered_map&lt;char, wolf::WordTrieNode*, std::hash&lt;char&gt;, std::equal_to&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt; &gt;::~unordered_map (55 samples, 0.63%)</title><rect x="72.5086%" y="245" width="0.6271%" height="15" fill="rgb(245,82,37)" fg:x="6359" fg:w="55"/><text x="72.7586%" y="255.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (55 samples, 0.63%)</title><rect x="72.5086%" y="229" width="0.6271%" height="15" fill="rgb(227,149,46)" fg:x="6359" fg:w="55"/><text x="72.7586%" y="239.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (51 samples, 0.58%)</title><rect x="72.5542%" y="213" width="0.5815%" height="15" fill="rgb(218,36,50)" fg:x="6363" fg:w="51"/><text x="72.8042%" y="223.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (51 samples, 0.58%)</title><rect x="72.5542%" y="197" width="0.5815%" height="15" fill="rgb(226,80,48)" fg:x="6363" fg:w="51"/><text x="72.8042%" y="207.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (51 samples, 0.58%)</title><rect x="72.5542%" y="181" width="0.5815%" height="15" fill="rgb(238,224,15)" fg:x="6363" fg:w="51"/><text x="72.8042%" y="191.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (51 samples, 0.58%)</title><rect x="72.5542%" y="165" width="0.5815%" height="15" fill="rgb(241,136,10)" fg:x="6363" fg:w="51"/><text x="72.8042%" y="175.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::deallocate (51 samples, 0.58%)</title><rect x="72.5542%" y="149" width="0.5815%" height="15" fill="rgb(208,32,45)" fg:x="6363" fg:w="51"/><text x="72.8042%" y="159.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt;::deallocate (51 samples, 0.58%)</title><rect x="72.5542%" y="133" width="0.5815%" height="15" fill="rgb(207,135,9)" fg:x="6363" fg:w="51"/><text x="72.8042%" y="143.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt;::deallocate (51 samples, 0.58%)</title><rect x="72.5542%" y="117" width="0.5815%" height="15" fill="rgb(206,86,44)" fg:x="6363" fg:w="51"/><text x="72.8042%" y="127.50"></text></g><g><title>operator delete (3 samples, 0.03%)</title><rect x="73.1015%" y="101" width="0.0342%" height="15" fill="rgb(245,177,15)" fg:x="6411" fg:w="3"/><text x="73.3515%" y="111.50"></text></g><g><title>std::_Function_handler&lt;void (wolf::WordTrieNode*), wolf::WordTrie::clear()::$_0&gt;::_M_manager (1 samples, 0.01%)</title><rect x="73.1357%" y="325" width="0.0114%" height="15" fill="rgb(206,64,50)" fg:x="6414" fg:w="1"/><text x="73.3857%" y="335.50"></text></g><g><title>cfree (119 samples, 1.36%)</title><rect x="77.8905%" y="309" width="1.3569%" height="15" fill="rgb(234,36,40)" fg:x="6831" fg:w="119"/><text x="78.1405%" y="319.50"></text></g><g><title>[libc.so.6] (101 samples, 1.15%)</title><rect x="78.0958%" y="293" width="1.1517%" height="15" fill="rgb(213,64,8)" fg:x="6849" fg:w="101"/><text x="78.3458%" y="303.50"></text></g><g><title>cfree (89 samples, 1.01%)</title><rect x="79.7035%" y="101" width="1.0148%" height="15" fill="rgb(210,75,36)" fg:x="6990" fg:w="89"/><text x="79.9535%" y="111.50"></text></g><g><title>[libc.so.6] (78 samples, 0.89%)</title><rect x="79.8290%" y="85" width="0.8894%" height="15" fill="rgb(229,88,21)" fg:x="7001" fg:w="78"/><text x="80.0790%" y="95.50"></text></g><g><title>[libc.so.6] (40 samples, 0.46%)</title><rect x="80.2623%" y="69" width="0.4561%" height="15" fill="rgb(252,204,47)" fg:x="7039" fg:w="40"/><text x="80.5123%" y="79.50"></text></g><g><title>[libc.so.6] (38 samples, 0.43%)</title><rect x="80.2851%" y="53" width="0.4333%" height="15" fill="rgb(208,77,27)" fg:x="7041" fg:w="38"/><text x="80.5351%" y="63.50"></text></g><g><title>[libc.so.6] (18 samples, 0.21%)</title><rect x="80.5131%" y="37" width="0.2052%" height="15" fill="rgb(221,76,26)" fg:x="7061" fg:w="18"/><text x="80.7631%" y="47.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (90 samples, 1.03%)</title><rect x="79.7035%" y="197" width="1.0262%" height="15" fill="rgb(225,139,18)" fg:x="6990" fg:w="90"/><text x="79.9535%" y="207.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (90 samples, 1.03%)</title><rect x="79.7035%" y="181" width="1.0262%" height="15" fill="rgb(230,137,11)" fg:x="6990" fg:w="90"/><text x="79.9535%" y="191.50"></text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_buckets (90 samples, 1.03%)</title><rect x="79.7035%" y="165" width="1.0262%" height="15" fill="rgb(212,28,1)" fg:x="6990" fg:w="90"/><text x="79.9535%" y="175.50"></text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node_base*&gt; &gt;::deallocate (90 samples, 1.03%)</title><rect x="79.7035%" y="149" width="1.0262%" height="15" fill="rgb(248,164,17)" fg:x="6990" fg:w="90"/><text x="79.9535%" y="159.50"></text></g><g><title>std::allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (90 samples, 1.03%)</title><rect x="79.7035%" y="133" width="1.0262%" height="15" fill="rgb(222,171,42)" fg:x="6990" fg:w="90"/><text x="79.9535%" y="143.50"></text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node_base*&gt;::deallocate (90 samples, 1.03%)</title><rect x="79.7035%" y="117" width="1.0262%" height="15" fill="rgb(243,84,45)" fg:x="6990" fg:w="90"/><text x="79.9535%" y="127.50"></text></g><g><title>operator delete (1 samples, 0.01%)</title><rect x="80.7184%" y="101" width="0.0114%" height="15" fill="rgb(252,49,23)" fg:x="7079" fg:w="1"/><text x="80.9684%" y="111.50"></text></g><g><title>[libc.so.6] (4 samples, 0.05%)</title><rect x="80.7640%" y="181" width="0.0456%" height="15" fill="rgb(215,19,7)" fg:x="7083" fg:w="4"/><text x="81.0140%" y="191.50"></text></g><g><title>cfree (244 samples, 2.78%)</title><rect x="80.9464%" y="85" width="2.7822%" height="15" fill="rgb(238,81,41)" fg:x="7099" fg:w="244"/><text x="81.1964%" y="95.50">cf..</text></g><g><title>[libc.so.6] (174 samples, 1.98%)</title><rect x="81.7446%" y="69" width="1.9840%" height="15" fill="rgb(210,199,37)" fg:x="7169" fg:w="174"/><text x="81.9946%" y="79.50">[..</text></g><g><title>std::_Function_handler&lt;void (wolf::WordTrieNode*), wolf::WordTrie::clear()::$_0&gt;::_M_invoke (430 samples, 4.90%)</title><rect x="79.2474%" y="309" width="4.9031%" height="15" fill="rgb(244,192,49)" fg:x="6950" fg:w="430"/><text x="79.4974%" y="319.50">std::_..</text></g><g><title>std::enable_if&lt;is_invocable_r_v&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt;, void&gt;::type std::__invoke_r&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt; (430 samples, 4.90%)</title><rect x="79.2474%" y="293" width="4.9031%" height="15" fill="rgb(226,211,11)" fg:x="6950" fg:w="430"/><text x="79.4974%" y="303.50">std::e..</text></g><g><title>void std::__invoke_impl&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt; (430 samples, 4.90%)</title><rect x="79.2474%" y="277" width="4.9031%" height="15" fill="rgb(236,162,54)" fg:x="6950" fg:w="430"/><text x="79.4974%" y="287.50">void s..</text></g><g><title>wolf::WordTrie::clear (390 samples, 4.45%)</title><rect x="79.7035%" y="261" width="4.4470%" height="15" fill="rgb(220,229,9)" fg:x="6990" fg:w="390"/><text x="79.9535%" y="271.50">wolf:..</text></g><g><title>wolf::WordTrieNode::~WordTrieNode (390 samples, 4.45%)</title><rect x="79.7035%" y="245" width="4.4470%" height="15" fill="rgb(250,87,22)" fg:x="6990" fg:w="390"/><text x="79.9535%" y="255.50">wolf:..</text></g><g><title>std::unordered_map&lt;char, wolf::WordTrieNode*, std::hash&lt;char&gt;, std::equal_to&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt; &gt;::~unordered_map (390 samples, 4.45%)</title><rect x="79.7035%" y="229" width="4.4470%" height="15" fill="rgb(239,43,17)" fg:x="6990" fg:w="390"/><text x="79.9535%" y="239.50">std::..</text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (390 samples, 4.45%)</title><rect x="79.7035%" y="213" width="4.4470%" height="15" fill="rgb(231,177,25)" fg:x="6990" fg:w="390"/><text x="79.9535%" y="223.50">std::..</text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (300 samples, 3.42%)</title><rect x="80.7298%" y="197" width="3.4208%" height="15" fill="rgb(219,179,1)" fg:x="7080" fg:w="300"/><text x="80.9798%" y="207.50">std..</text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_nodes (293 samples, 3.34%)</title><rect x="80.8096%" y="181" width="3.3409%" height="15" fill="rgb(238,219,53)" fg:x="7087" fg:w="293"/><text x="81.0596%" y="191.50">std..</text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node (293 samples, 3.34%)</title><rect x="80.8096%" y="165" width="3.3409%" height="15" fill="rgb(232,167,36)" fg:x="7087" fg:w="293"/><text x="81.0596%" y="175.50">std..</text></g><g><title>std::__detail::_Hashtable_alloc&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::_M_deallocate_node_ptr (293 samples, 3.34%)</title><rect x="80.8096%" y="149" width="3.3409%" height="15" fill="rgb(244,19,51)" fg:x="7087" fg:w="293"/><text x="81.0596%" y="159.50">std..</text></g><g><title>std::allocator_traits&lt;std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt; &gt;::deallocate (293 samples, 3.34%)</title><rect x="80.8096%" y="133" width="3.3409%" height="15" fill="rgb(224,6,22)" fg:x="7087" fg:w="293"/><text x="81.0596%" y="143.50">std..</text></g><g><title>std::allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt;::deallocate (293 samples, 3.34%)</title><rect x="80.8096%" y="117" width="3.3409%" height="15" fill="rgb(224,145,5)" fg:x="7087" fg:w="293"/><text x="81.0596%" y="127.50">std..</text></g><g><title>std::__new_allocator&lt;std::__detail::_Hash_node&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt;, false&gt; &gt;::deallocate (293 samples, 3.34%)</title><rect x="80.8096%" y="101" width="3.3409%" height="15" fill="rgb(234,130,49)" fg:x="7087" fg:w="293"/><text x="81.0596%" y="111.50">std..</text></g><g><title>operator delete (37 samples, 0.42%)</title><rect x="83.7286%" y="85" width="0.4219%" height="15" fill="rgb(254,6,2)" fg:x="7343" fg:w="37"/><text x="83.9786%" y="95.50"></text></g><g><title>std::_Function_handler&lt;void (wolf::WordTrieNode*), wolf::WordTrie::clear()::$_0&gt;::_M_manager (82 samples, 0.94%)</title><rect x="84.1505%" y="309" width="0.9350%" height="15" fill="rgb(208,96,46)" fg:x="7380" fg:w="82"/><text x="84.4005%" y="319.50"></text></g><g><title>std::function&lt;void (wolf::WordTrieNode*)&gt;::function (298 samples, 3.40%)</title><rect x="85.0855%" y="309" width="3.3979%" height="15" fill="rgb(239,3,39)" fg:x="7462" fg:w="298"/><text x="85.3355%" y="319.50">std..</text></g><g><title>std::_Function_base::_Function_base (298 samples, 3.40%)</title><rect x="85.0855%" y="293" width="3.3979%" height="15" fill="rgb(233,210,1)" fg:x="7462" fg:w="298"/><text x="85.3355%" y="303.50">std..</text></g><g><title>std::function&lt;void (wolf::WordTrieNode*)&gt;::operator (11 samples, 0.13%)</title><rect x="88.4835%" y="309" width="0.1254%" height="15" fill="rgb(244,137,37)" fg:x="7760" fg:w="11"/><text x="88.7335%" y="319.50"></text></g><g><title>std::_Function_base::_M_empty (11 samples, 0.13%)</title><rect x="88.4835%" y="293" width="0.1254%" height="15" fill="rgb(240,136,2)" fg:x="7760" fg:w="11"/><text x="88.7335%" y="303.50"></text></g><g><title>cfree (539 samples, 6.15%)</title><rect x="92.6910%" y="293" width="6.1460%" height="15" fill="rgb(239,18,37)" fg:x="8129" fg:w="539"/><text x="92.9410%" y="303.50">cfree</text></g><g><title>[libc.so.6] (492 samples, 5.61%)</title><rect x="93.2269%" y="277" width="5.6100%" height="15" fill="rgb(218,185,22)" fg:x="8176" fg:w="492"/><text x="93.4769%" y="287.50">[libc.s..</text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (7 samples, 0.08%)</title><rect x="99.0650%" y="181" width="0.0798%" height="15" fill="rgb(225,218,4)" fg:x="8688" fg:w="7"/><text x="99.3150%" y="191.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_deallocate_buckets (1 samples, 0.01%)</title><rect x="99.1334%" y="165" width="0.0114%" height="15" fill="rgb(230,182,32)" fg:x="8694" fg:w="1"/><text x="99.3834%" y="175.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::_M_uses_single_bucket (1 samples, 0.01%)</title><rect x="99.1334%" y="149" width="0.0114%" height="15" fill="rgb(242,56,43)" fg:x="8694" fg:w="1"/><text x="99.3834%" y="159.50"></text></g><g><title>std::_Function_handler&lt;void (wolf::WordTrieNode*), wolf::WordTrie::clear()::$_0&gt;::_M_invoke (68 samples, 0.78%)</title><rect x="98.8369%" y="293" width="0.7754%" height="15" fill="rgb(233,99,24)" fg:x="8668" fg:w="68"/><text x="99.0869%" y="303.50"></text></g><g><title>std::enable_if&lt;is_invocable_r_v&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt;, void&gt;::type std::__invoke_r&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt; (68 samples, 0.78%)</title><rect x="98.8369%" y="277" width="0.7754%" height="15" fill="rgb(234,209,42)" fg:x="8668" fg:w="68"/><text x="99.0869%" y="287.50"></text></g><g><title>void std::__invoke_impl&lt;void, wolf::WordTrie::clear()::$_0&amp;, wolf::WordTrieNode*&gt; (68 samples, 0.78%)</title><rect x="98.8369%" y="261" width="0.7754%" height="15" fill="rgb(227,7,12)" fg:x="8668" fg:w="68"/><text x="99.0869%" y="271.50"></text></g><g><title>wolf::WordTrie::clear (48 samples, 0.55%)</title><rect x="99.0650%" y="245" width="0.5473%" height="15" fill="rgb(245,203,43)" fg:x="8688" fg:w="48"/><text x="99.3150%" y="255.50"></text></g><g><title>wolf::WordTrieNode::~WordTrieNode (48 samples, 0.55%)</title><rect x="99.0650%" y="229" width="0.5473%" height="15" fill="rgb(238,205,33)" fg:x="8688" fg:w="48"/><text x="99.3150%" y="239.50"></text></g><g><title>std::unordered_map&lt;char, wolf::WordTrieNode*, std::hash&lt;char&gt;, std::equal_to&lt;char&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt; &gt;::~unordered_map (48 samples, 0.55%)</title><rect x="99.0650%" y="213" width="0.5473%" height="15" fill="rgb(231,56,7)" fg:x="8688" fg:w="48"/><text x="99.3150%" y="223.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::~_Hashtable (48 samples, 0.55%)</title><rect x="99.0650%" y="197" width="0.5473%" height="15" fill="rgb(244,186,29)" fg:x="8688" fg:w="48"/><text x="99.3150%" y="207.50"></text></g><g><title>std::_Hashtable&lt;char, std::pair&lt;char const, wolf::WordTrieNode*&gt;, std::allocator&lt;std::pair&lt;char const, wolf::WordTrieNode*&gt; &gt;, std::__detail::_Select1st, std::equal_to&lt;char&gt;, std::hash&lt;char&gt;, std::__detail::_Mod_range_hashing, std::__detail::_Default_ranged_hash, std::__detail::_Prime_rehash_policy, std::__detail::_Hashtable_traits&lt;false, false, true&gt; &gt;::clear (41 samples, 0.47%)</title><rect x="99.1448%" y="181" width="0.4675%" height="15" fill="rgb(234,111,31)" fg:x="8695" fg:w="41"/><text x="99.3948%" y="191.50"></text></g><g><title>[libc.so.6] (18 samples, 0.21%)</title><rect x="99.4071%" y="165" width="0.2052%" height="15" fill="rgb(241,149,10)" fg:x="8718" fg:w="18"/><text x="99.6571%" y="175.50"></text></g><g><title>wolf::Bench::run (2,431 samples, 27.72%)</title><rect x="72.1551%" y="549" width="27.7195%" height="15" fill="rgb(249,206,44)" fg:x="6328" fg:w="2431"/><text x="72.4051%" y="559.50">wolf::Bench::run</text></g><g><title>wolf::Bench::run_any (2,431 samples, 27.72%)</title><rect x="72.1551%" y="533" width="27.7195%" height="15" fill="rgb(251,153,30)" fg:x="6328" fg:w="2431"/><text x="72.4051%" y="543.50">wolf::Bench::run_any</text></g><g><title>std::_Function_handler&lt;wolf::BenchResult (std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long), wolf::BenchResult (*)(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long)&gt;::_M_invoke (2,431 samples, 27.72%)</title><rect x="72.1551%" y="517" width="27.7195%" height="15" fill="rgb(239,152,38)" fg:x="6328" fg:w="2431"/><text x="72.4051%" y="527.50">std::_Function_handler&lt;wolf::BenchResult (st..</text></g><g><title>std::enable_if&lt;is_invocable_r_v&lt;wolf::BenchResult, wolf::BenchResult (*&amp;)(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long), std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long&gt;, wolf::BenchResult&gt;::type std::__invoke_r&lt;wolf::BenchResult, wolf::BenchResult (*&amp;)(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long), std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long&gt; (2,431 samples, 27.72%)</title><rect x="72.1551%" y="501" width="27.7195%" height="15" fill="rgb(249,139,47)" fg:x="6328" fg:w="2431"/><text x="72.4051%" y="511.50">std::enable_if&lt;is_invocable_r_v&lt;wolf::BenchR..</text></g><g><title>wolf::BenchResult std::__invoke_impl&lt;wolf::BenchResult, wolf::BenchResult (*&amp;)(std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long), std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; const&amp;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;, unsigned long&gt; (2,431 samples, 27.72%)</title><rect x="72.1551%" y="485" width="27.7195%" height="15" fill="rgb(244,64,35)" fg:x="6328" fg:w="2431"/><text x="72.4051%" y="495.50">wolf::BenchResult std::__invoke_impl&lt;wolf::B..</text></g><g><title>wolf::Bench::run_trie_filter (2,431 samples, 27.72%)</title><rect x="72.1551%" y="469" width="27.7195%" height="15" fill="rgb(216,46,15)" fg:x="6328" fg:w="2431"/><text x="72.4051%" y="479.50">wolf::Bench::run_trie_filter</text></g><g><title>wolf::MultiTrieFilter::~MultiTrieFilter (2,423 samples, 27.63%)</title><rect x="72.2463%" y="453" width="27.6283%" height="15" fill="rgb(250,74,19)" fg:x="6336" fg:w="2423"/><text x="72.4963%" y="463.50">wolf::MultiTrieFilter::~MultiTrieFilter</text></g><g><title>std::vector&lt;wolf::WordTrie, std::allocator&lt;wolf::WordTrie&gt; &gt;::~vector (2,423 samples, 27.63%)</title><rect x="72.2463%" y="437" width="27.6283%" height="15" fill="rgb(249,42,33)" fg:x="6336" fg:w="2423"/><text x="72.4963%" y="447.50">std::vector&lt;wolf::WordTrie, std::allocator&lt;w..</text></g><g><title>void std::_Destroy&lt;wolf::WordTrie*, wolf::WordTrie&gt; (2,423 samples, 27.63%)</title><rect x="72.2463%" y="421" width="27.6283%" height="15" fill="rgb(242,149,17)" fg:x="6336" fg:w="2423"/><text x="72.4963%" y="431.50">void std::_Destroy&lt;wolf::WordTrie*, wolf::Wo..</text></g><g><title>void std::_Destroy&lt;wolf::WordTrie*&gt; (2,423 samples, 27.63%)</title><rect x="72.2463%" y="405" width="27.6283%" height="15" fill="rgb(244,29,21)" fg:x="6336" fg:w="2423"/><text x="72.4963%" y="415.50">void std::_Destroy&lt;wolf::WordTrie*&gt;</text></g><g><title>void std::_Destroy_aux&lt;false&gt;::__destroy&lt;wolf::WordTrie*&gt; (2,423 samples, 27.63%)</title><rect x="72.2463%" y="389" width="27.6283%" height="15" fill="rgb(220,130,37)" fg:x="6336" fg:w="2423"/><text x="72.4963%" y="399.50">void std::_Destroy_aux&lt;false&gt;::__destroy&lt;wol..</text></g><g><title>wolf::WordTrie::traverse_nodes_postorder (2,423 samples, 27.63%)</title><rect x="72.2463%" y="373" width="27.6283%" height="15" fill="rgb(211,67,2)" fg:x="6336" fg:w="2423"/><text x="72.4963%" y="383.50">wolf::WordTrie::traverse_nodes_postorder</text></g><g><title>wolf::WordTrie::traverse_nodes_postorder (2,423 samples, 27.63%)</title><rect x="72.2463%" y="357" width="27.6283%" height="15" fill="rgb(235,68,52)" fg:x="6336" fg:w="2423"/><text x="72.4963%" y="367.50">wolf::WordTrie::traverse_nodes_postorder</text></g><g><title>wolf::WordTrie::traverse_nodes_postorder (2,420 samples, 27.59%)</title><rect x="72.2805%" y="341" width="27.5941%" height="15" fill="rgb(246,142,3)" fg:x="6339" fg:w="2420"/><text x="72.5305%" y="351.50">wolf::WordTrie::traverse_nodes_postorder</text></g><g><title>wolf::WordTrie::traverse_nodes_postorder (2,344 samples, 26.73%)</title><rect x="73.1471%" y="325" width="26.7275%" height="15" fill="rgb(241,25,7)" fg:x="6415" fg:w="2344"/><text x="73.3971%" y="335.50">wolf::WordTrie::traverse_nodes_postorder</text></g><g><title>wolf::WordTrie::traverse_nodes_postorder (988 samples, 11.27%)</title><rect x="88.6089%" y="309" width="11.2657%" height="15" fill="rgb(242,119,39)" fg:x="7771" fg:w="988"/><text x="88.8589%" y="319.50">wolf::WordTrie::t..</text></g><g><title>std::function&lt;void (wolf::WordTrieNode*)&gt;::operator (23 samples, 0.26%)</title><rect x="99.6123%" y="293" width="0.2623%" height="15" fill="rgb(241,98,45)" fg:x="8736" fg:w="23"/><text x="99.8623%" y="303.50"></text></g><g><title>std::_Function_base::_M_empty (23 samples, 0.26%)</title><rect x="99.6123%" y="277" width="0.2623%" height="15" fill="rgb(254,28,30)" fg:x="8736" fg:w="23"/><text x="99.8623%" y="287.50"></text></g><g><title>std::basic_istream&lt;char, std::char_traits&lt;char&gt; &gt;&amp; std::getline&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; (1 samples, 0.01%)</title><rect x="99.8746%" y="533" width="0.0114%" height="15" fill="rgb(241,142,54)" fg:x="8759" fg:w="1"/><text x="100.1246%" y="543.50"></text></g><g><title>std::char_traits&lt;char&gt;::find (1 samples, 0.01%)</title><rect x="99.8746%" y="517" width="0.0114%" height="15" fill="rgb(222,85,15)" fg:x="8759" fg:w="1"/><text x="100.1246%" y="527.50"></text></g><g><title>[libc.so.6] (1 samples, 0.01%)</title><rect x="99.8746%" y="501" width="0.0114%" height="15" fill="rgb(210,85,47)" fg:x="8759" fg:w="1"/><text x="100.1246%" y="511.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::push_back (9 samples, 0.10%)</title><rect x="99.8860%" y="533" width="0.1026%" height="15" fill="rgb(224,206,25)" fg:x="8760" fg:w="9"/><text x="100.1360%" y="543.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;&amp; std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::emplace_back&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (9 samples, 0.10%)</title><rect x="99.8860%" y="517" width="0.1026%" height="15" fill="rgb(243,201,19)" fg:x="8760" fg:w="9"/><text x="100.1360%" y="527.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (9 samples, 0.10%)</title><rect x="99.8860%" y="501" width="0.1026%" height="15" fill="rgb(236,59,4)" fg:x="8760" fg:w="9"/><text x="100.1360%" y="511.50"></text></g><g><title>decltype  (9 samples, 0.10%)</title><rect x="99.8860%" y="485" width="0.1026%" height="15" fill="rgb(254,179,45)" fg:x="8760" fg:w="9"/><text x="100.1360%" y="495.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (9 samples, 0.10%)</title><rect x="99.8860%" y="469" width="0.1026%" height="15" fill="rgb(226,14,10)" fg:x="8760" fg:w="9"/><text x="100.1360%" y="479.50"></text></g><g><title>std::char_traits&lt;char&gt;::copy (9 samples, 0.10%)</title><rect x="99.8860%" y="453" width="0.1026%" height="15" fill="rgb(244,27,41)" fg:x="8760" fg:w="9"/><text x="100.1360%" y="463.50"></text></g><g><title>[libc.so.6] (9 samples, 0.10%)</title><rect x="99.8860%" y="437" width="0.1026%" height="15" fill="rgb(235,35,32)" fg:x="8760" fg:w="9"/><text x="100.1360%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9772%" y="421" width="0.0114%" height="15" fill="rgb(218,68,31)" fg:x="8768" fg:w="1"/><text x="100.2272%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.01%)</title><rect x="99.9772%" y="405" width="0.0114%" height="15" fill="rgb(207,120,37)" fg:x="8768" fg:w="1"/><text x="100.2272%" y="415.50"></text></g><g><title>all (8,770 samples, 100%)</title><rect x="0.0000%" y="661" width="100.0000%" height="15" fill="rgb(227,98,0)" fg:x="0" fg:w="8770"/><text x="0.2500%" y="671.50"></text></g><g><title>wolf (8,770 samples, 100.00%)</title><rect x="0.0000%" y="645" width="100.0000%" height="15" fill="rgb(207,7,3)" fg:x="0" fg:w="8770"/><text x="0.2500%" y="655.50">wolf</text></g><g><title>_start (2,443 samples, 27.86%)</title><rect x="72.1437%" y="629" width="27.8563%" height="15" fill="rgb(206,98,19)" fg:x="6327" fg:w="2443"/><text x="72.3937%" y="639.50">_start</text></g><g><title>__libc_start_main (2,443 samples, 27.86%)</title><rect x="72.1437%" y="613" width="27.8563%" height="15" fill="rgb(217,5,26)" fg:x="6327" fg:w="2443"/><text x="72.3937%" y="623.50">__libc_start_main</text></g><g><title>[libc.so.6] (2,443 samples, 27.86%)</title><rect x="72.1437%" y="597" width="27.8563%" height="15" fill="rgb(235,190,38)" fg:x="6327" fg:w="2443"/><text x="72.3937%" y="607.50">[libc.so.6]</text></g><g><title>main (2,443 samples, 27.86%)</title><rect x="72.1437%" y="581" width="27.8563%" height="15" fill="rgb(247,86,24)" fg:x="6327" fg:w="2443"/><text x="72.3937%" y="591.50">main</text></g><g><title>run_benchmark (2,443 samples, 27.86%)</title><rect x="72.1437%" y="565" width="27.8563%" height="15" fill="rgb(205,101,16)" fg:x="6327" fg:w="2443"/><text x="72.3937%" y="575.50">run_benchmark</text></g><g><title>wolf::FileReader::read_lines[abi:cxx11] (11 samples, 0.13%)</title><rect x="99.8746%" y="549" width="0.1254%" height="15" fill="rgb(246,168,33)" fg:x="8759" fg:w="11"/><text x="100.1246%" y="559.50"></text></g><g><title>void std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_M_realloc_insert&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="99.9886%" y="533" width="0.0114%" height="15" fill="rgb(231,114,1)" fg:x="8769" fg:w="1"/><text x="100.2386%" y="543.50"></text></g><g><title>std::vector&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::_S_relocate (1 samples, 0.01%)</title><rect x="99.9886%" y="517" width="0.0114%" height="15" fill="rgb(207,184,53)" fg:x="8769" fg:w="1"/><text x="100.2386%" y="527.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="99.9886%" y="501" width="0.0114%" height="15" fill="rgb(224,95,51)" fg:x="8769" fg:w="1"/><text x="100.2386%" y="511.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;* std::__relocate_a_1&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;*, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="99.9886%" y="485" width="0.0114%" height="15" fill="rgb(212,188,45)" fg:x="8769" fg:w="1"/><text x="100.2386%" y="495.50"></text></g><g><title>void std::__relocate_object_a&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="99.9886%" y="469" width="0.0114%" height="15" fill="rgb(223,154,38)" fg:x="8769" fg:w="1"/><text x="100.2386%" y="479.50"></text></g><g><title>void std::allocator_traits&lt;std::allocator&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; &gt;::construct&lt;std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;, std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; &gt; (1 samples, 0.01%)</title><rect x="99.9886%" y="453" width="0.0114%" height="15" fill="rgb(251,22,52)" fg:x="8769" fg:w="1"/><text x="100.2386%" y="463.50"></text></g><g><title>decltype  (1 samples, 0.01%)</title><rect x="99.9886%" y="437" width="0.0114%" height="15" fill="rgb(229,209,22)" fg:x="8769" fg:w="1"/><text x="100.2386%" y="447.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::basic_string (1 samples, 0.01%)</title><rect x="99.9886%" y="421" width="0.0114%" height="15" fill="rgb(234,138,34)" fg:x="8769" fg:w="1"/><text x="100.2386%" y="431.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_is_local (1 samples, 0.01%)</title><rect x="99.9886%" y="405" width="0.0114%" height="15" fill="rgb(212,95,11)" fg:x="8769" fg:w="1"/><text x="100.2386%" y="415.50"></text></g><g><title>std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt;::_M_data (1 samples, 0.01%)</title><rect x="99.9886%" y="389" width="0.0114%" height="15" fill="rgb(240,179,47)" fg:x="8769" fg:w="1"/><text x="100.2386%" y="399.50"></text></g></svg></svg>